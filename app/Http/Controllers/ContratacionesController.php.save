<?php

namespace App\Http\Controllers;

use App\Models\Anticipos;
use App\Models\Cargo;
use App\Models\Consumos;
use App\Models\ImagenesRoles;
use App\Models\Nomina;
use App\Models\OtrosDescuentos;
use App\Models\Vacaciones;
use Illuminate\Http\Request;
use App\Models\TipoContratos;
use App\Models\Contrato;
use App\Models\Comisiones;
use App\Models\ConfiguracionEmpresa;
use App\Models\TipoIdentificacionGrupo;
use App\Models\SequenceValueItem;
use App\Models\Person;
use App\Models\Party;
use App\Models\Geo;
use App\Models\BonoFijo;
use App\Models\Addendum;
use App\Models\PartyIdentification;
use App\Models\PartyRole;
use App\Models\ContactMetch;
use App\Models\PartyContactMech;
use App\Models\PostalAddres;
use App\Models\TelecomNumber;
use App\Models\PartyRelationShip;
use App\Models\Contrataciones;
use App\Models\DetalleContratacion;
use App\Models\ForeginContrataciones;
use App\Models\MotivoAnulacion;
use App\Models\FinalizacionContratacion;
use App\Models\ImagenesDetallesContrataciones;
use App\Models\ConfiguracionVariablesEmpresa;
use App\Models\Iva;
use Illuminate\Support\Facades\Storage;
use Validator;
use App\Models\Prestamo;
use Carbon\Carbon;
use DB;
use PDF;

class ContratacionesController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $dataContrataciones = ForeginContrataciones::where([
            ['estado',isset($request->estado) ? $request->estado : 1],
            ['id_tipo_contrato_descripcion',isset($request->tipo_contrato) ? $request->tipo_contrato : 2 ]
        ])->join('person as p','contrataciones.party_id','p.party_id')
            ->select('p.first_name','p.last_name','p.party_id')->distinct()->get();


//	dd( $dataContrataciones);
        $arrDataContrataciones = [];
        foreach($dataContrataciones as $key => $clavesContratos){

            $d = Contrataciones::where([
                ['id_empleado',$clavesContratos->party_id],
                ['estado',isset($request->estado) ? $request->estado : 1],
                ['id_tipo_contrato_descripcion',isset($request->tipo_contrato) ? $request->tipo_contrato : 2 ]
            ])->join('detalles_contrataciones as dc','contrataciones.id_contrataciones','=','dc.id_contrataciones');

            if($request->estado == 3)
                $d = $d->join('finalizacion_contrataciones as fc','dc.id_contrataciones','fc.id_contrataciones');

            $d = $d->get();

            foreach ($d as $item) {
                $tc = Contrato::where('contrato.id_tipo_contrato',$item->id_tipo_contrato)
                    ->join('tipo_contrato as tc', 'contrato.id_tipo_contrato','=', 'tc.id_tipo_contrato')
                    ->select('tc.nombre','tc.nombre','contrato.id_contrato','tc.descripcion','tc.id_tipo_contrato_descripcion')->first();

                $fecha_finalizacion = false;
                if(isset($item->fecha_finalizacion))
                    $fecha_finalizacion = $item->fecha_finalizacion;

                if(!empty($request->tipo_contrato)){

                    if($item->id_tipo_contrato_descripcion == $request->tipo_contrato)
                        $arrDataContrataciones[] =
                            [
                                'idContrataciones'   => $item->id_contrataciones,
                                'tipoContratacion'   => $tc->id_tipo_contrato_descripcion,
                                'idEmpleado'         => $item->id_empleado,
                                'idContrato'         => $item->id_contrato,
                                'estado'             => $item->estado,
                                'idCargo'            => $item->id_cargo,
                                'contrato'           => $item->nombre_archivo_contrato,
                                'expedicionContrato' => $item->fecha_expedicion_contrato,
                                'tipoContrato'       => $tc->nombre,
                                'descripcionContrato'=> $tc->descripcion,
                                'expiracionContrato' => $item->fecha_expiracion_contrato,
                                'nombre'             => $dataContrataciones[$key]->first_name ." ". $dataContrataciones[$key]->last_name,
                                'fecha_finalizacion' => $fecha_finalizacion
                            ];
                }else{

                    if($item->id_tipo_contrato_descripcion == 2 || ($item->id_tipo_contrato_descripcion == 1))
                        $arrDataContrataciones[] =
                            [
                                'idContrataciones'   => $item->id_contrataciones,
                                'tipoContratacion'   => $tc->id_tipo_contrato_descripcion,
                                'idEmpleado'         => $item->id_empleado,
                                'idContrato'         => $item->id_contrato,
                                'estado'             => $item->estado,
                                'idCargo'            => $item->id_cargo,
                                'contrato'           => $item->nombre_archivo_contrato,
                                'expedicionContrato' => $item->fecha_expedicion_contrato,
                                'tipoContrato'       => $tc->nombre,
                                'descripcionContrato'=> $tc->descripcion,
                                'expiracionContrato' => $item->fecha_expiracion_contrato,
                                'nombre'             => $dataContrataciones[$key]->first_name ." ". $dataContrataciones[$key]->last_name,
                                'fecha_finalizacion' => $fecha_finalizacion
                            ];

                }
            }

        }

        return view('layouts.views.contrataciones.list',[
            'arrDataContrataciones' => manualPagination($arrDataContrataciones, 10)
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {
        $dataContratacion = null;
        $dataCargos = null;
        $dataProvinicias = null;
        $dataEmpleados = null;
        $dataTipoIdentificacionGrupo = null;

        if(isset($request->idContratacion)){

            $dataContratacion = Contrataciones::where('contrataciones.id_contrataciones',$request->idContratacion)
            ->join('detalles_contrataciones as dc','contrataciones.id_contrataciones','dc.id_contrataciones')
                ->join('tipo_contrato as tc','contrataciones.id_tipo_contrato','tc.id_tipo_contrato')
                ->join('contrato as c','contrataciones.id_tipo_contrato','c.id_tipo_contrato')->first();
            $dataTipoIdentificacionGrupo = TipoIdentificacionGrupo::select('party_identification_type_id','description')->get();
            $dataCargos = Cargo::all();
            $dataProvinicias = Geo::where([
                ['geo_type_id','PROVINCE'],
                ['geo_id', 'like', 'EC%']
            ])->get();

            $dataEmpleados = PartyRole::join('person as p', 'party_role.party_id','=','p.party_id')
                ->join('party_identification as pi','p.party_id','=','pi.party_id')
                ->join('party_contact_mech as pcm', 'p.party_id','=','pcm.party_id')
                ->join('contact_mech as cm','pcm.contact_mech_id','=','cm.contact_mech_id');

            $existPartyRelationship = PartyRelationShip::where('party_id_from',$dataContratacion->id_empleado)->first();

            if($existPartyRelationship != null){
                $dataEmpleados->join('party_relationship as prs','party_role.party_id','prs.party_id_from')
                ->join('person as per', 'prs.party_id_to','=','per.party_id')
                ->join('party_contact_mech as pcmc', 'per.party_id','=','pcmc.party_id');

                $dataEmpleados = $dataEmpleados->select(
                'p.party_id',
                'p.first_name',
                'p.first_name',
                'p.last_name',
                'p.nacionalidad',
                'party_role.role_type_id',
                'p.gender',
                'p.birth_date',
                'pi.party_identification_type_id',
                'pi.id_value',
                'cm.contact_mech_id',
                'cm.info_string',
                ($existPartyRelationship != null ? 'per.party_id as party_id_contact' : 'cm.info_string'),
                ($existPartyRelationship != null ? 'per.first_name as first_name_contact' : 'cm.info_string'),
                ($existPartyRelationship != null ? 'per.last_name as last_name_contact' : 'cm.info_string')
            );
              
            }else{
                $dataEmpleados = $dataEmpleados->select(
                    'p.party_id',
                    'p.first_name',
                    'p.first_name',
                    'p.last_name',
                    'p.nacionalidad',
                    'party_role.role_type_id',
                    'p.gender',
                    'p.birth_date',
                    'pi.party_identification_type_id',
                    'pi.id_value',
                    'cm.contact_mech_id',
                    'cm.info_string'
                );
                
            }
       		
            $dataEmpleados = $dataEmpleados->where([
            	['party_role.party_id',$dataContratacion->id_empleado],
            	['party_role.role_type_id','EMPLOYEE']
            ])->first();
          
        }
     
        $sueldo_sectorial = 0;
//        if(isset($dataContratacion->sueldo_sectorial) && $dataContratacion->sueldo_sectorial)
//            $sueldo_sectorial = Cargo::where('id_cargo',$dataContratacion->id_cargo)->select('sueldo_minimo_sectorial')->first()->sueldo_minimo_sectorial;

        return view('layouts.views.contrataciones.partials.form_contrataciones',
            [
                'dataTipoContratos' => TipoContratos::where('estado',1)
                    ->whereIn('id_tipo_contrato', function ($query){
                        $query->select('id_tipo_contrato')->from('contrato');
                    })->get(),
                'dataContratacion' => $dataContratacion,
                'dataCargos' => $dataCargos,
                'dataProvinicias' => $dataProvinicias,
                'dataEmpleados' => $dataEmpleados,
                'dataTipoIdentificacionGrupo' => $dataTipoIdentificacionGrupo,
                'sueldo_sectorial' => $sueldo_sectorial,
                'iva' => Iva::all()
            ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        if($request->has('tipo_empleado')){

            $valida =  Validator::make($request->all(), [

                'salario'            => 'required',
                'fecha_inicio'       => 'required',
                'horas'              => 'required',
                'id_cargo'           => 'required',
                'id_tipo_contrato'   => 'required',
                'nombres'            => 'required',
                'apellidos'          => 'required',
                'nacimiento'         => 'required',
                'genero'             => 'required',
                'tipo_identificacion'=> 'required',
                'identificacion'     => 'required',
                'correo'             => 'required|email',
                'telefono'           => 'required',
                'C_V'                => 'required',
                'nacionalidad'       => 'required'
             ]);
        }
        else{
            $valida =  Validator::make($request->all(), [
                'id_empleado'      => 'required',
                'id_tipo_contrato' => 'required',
            ]);
        }

       if(!$valida->fails()) {

           $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                     hubo un error al realizar la contratación, intente nuevamente
               </div>';
           $status = 0;

           $objContrato      = Contrato::where('id_tipo_contrato',$request->id_tipo_contrato)->first();
           $objConfigEmpresa = ConfiguracionEmpresa::all();

           $partyIdentification = PartyIdentification::where('id_value',$request->identificacion)
               ->rightJoin('party_role as pr','party_identification.party_id','pr.party_id');

           if($request->has('tipo_empleado')){ //USUARIO NUEVOS DATOS

               if($partyIdentification->count() > 0){

                   if($partyIdentification->where('role_type_id','EMPLOYEE')->count() > 0){
                       $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                Este número de identificación ya se encuentra registrado en el sistema como empleado, destilde la opción "Usuario nuevo" y proceda a buscar al empleado en al lista del campo Empleado!
                           </div>';
                       $status = 0;
                   }else{
                       $objPartyRole = new PartyRole;
                       $objPartyRole->party_id = PartyIdentification::where('id_value',$request->identificacion)->first()->party_id;
                       $objPartyRole->role_type_id = 'EMPLOYEE';
                       $objPartyRole->status = true;
                       $objPartyRole->save();
                       $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                Los datos de esta persona ya existien en el sistema, le ha sido agregado el rol de empleado, destilde la opción "Usuario nuevo" y proceda a buscar al empleado en al lista del campo Empleado 
                               </div>';
                       $status = 1;
                   }

               }else{

                   $seqNextParty = SequenceValueItem::where('seq_name','Party')->select('seq_id')->first()->seq_id + 1;

                   $objSequenceValueItem = SequenceValueItem::find('Party');
                   $objSequenceValueItem->seq_id = $seqNextParty;

                   if($objSequenceValueItem->save()){

                       $objParty = new Party;
                       $objParty->party_id      = $seqNextParty;
                       $objParty->party_type_id = 'PERSON';

                       if($objParty->save()){

                           $partyContrato = $seqNextParty;
                           $objPerson = new Person;
                           $objPerson->party_id             = $seqNextParty;
                           $objPerson->first_name           = $request->nombres;
                           $objPerson->last_name            = $request->apellidos;
                           $objPerson->gender               = $request->genero;
                           $objPerson->birth_date           = $request->nacimiento;
                           $objPerson->nacionalidad         = $request->nacionalidad;

                           if($objPerson->save()){

                               $objPartyIdentificacion = new PartyIdentification;
                               $objPartyIdentificacion->party_id                      = $seqNextParty;
                               $objPartyIdentificacion->party_identification_type_id  = $request->tipo_identificacion;
                               $objPartyIdentificacion->id_value                      = $request->identificacion;

                               if($objPartyIdentificacion->save()){

                                   $objPartyRole = new PartyRole;
                                   $objPartyRole->party_id = $seqNextParty;
                                   $objPartyRole->role_type_id = 'EMPLOYEE';

                                   if($objPartyRole->save()){

                                       $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                               ->select('seq_id')->first()->seq_id + 1;

                                       $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                                       $objSequenceValueItem->seq_id = $seqNextContactMech;

                                       if($objSequenceValueItem->save()){
                                           $contacMechPersonEmailAddress = $seqNextContactMech;
                                           $objContactMetch = new ContactMetch;
                                           $objContactMetch->contact_mech_id      = $seqNextContactMech;
                                           $objContactMetch->contact_mech_type_id = 'EMAIL_ADDRESS';
                                           $objContactMetch->info_string          =  $request->correo;

                                           if($objContactMetch->save()){

                                               $objPartyContactMech = new PartyContactMech;
                                               $objPartyContactMech->party_id        = $seqNextParty;
                                               $objPartyContactMech->contact_mech_id = $seqNextContactMech;
                                               $objPartyContactMech->role_type_id    = 'EMPLOYEE';
                                               $objPartyContactMech->from_date       = date('Y/m/d');

                                               if(!$objPartyContactMech->save()){
                                                   ContactMetch::destroy($contacMechPersonEmailAddress);
                                                   PartyRole::destroy($partyContrato);
                                                   PartyIdentification::destroy($partyContrato);
                                                   Person::destroy($partyContrato);
                                                   Party::destroy($partyContrato);
                                                   $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                        ha ocurrido un erro al crear la contratación, intenta nuevamente
                                                   </div>';
                                                   return response()->json(array('status'=>false,'msg'=>$msg));
                                               }

                                               $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                                       ->select('seq_id')->first()->seq_id + 1;

                                               $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                                               $objSequenceValueItem->seq_id = $seqNextContactMech;

                                               if($objSequenceValueItem->save()) {

                                                   $contacMechPersonTelecomNumber = $seqNextContactMech;
                                                   $objContactMetch = new ContactMetch;
                                                   $objContactMetch->contact_mech_id      = $seqNextContactMech;
                                                   $objContactMetch->contact_mech_type_id = 'TELECOM_NUMBER';

                                                   if(!$objContactMetch->save()){
                                                       PartyContactMech::destroy($partyContrato);
                                                       ContactMetch::destroy($contacMechPersonEmailAddress);
                                                       PartyRole::destroy($partyContrato);
                                                       PartyIdentification::destroy($partyContrato);
                                                       Person::destroy($partyContrato);
                                                       Party::destroy($partyContrato);
                                                       $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                                    ha ocurrido un erro al crear la contratación, intenta nuevamente
                                                               </div>';
                                                       return response()->json(array('status'=>false,'msg'=>$msg));
                                                   }

                                                   $objTelecomNumber = new TelecomNumber;
                                                   $objTelecomNumber->contact_mech_id = $seqNextContactMech;
                                                   $objTelecomNumber->country_code = '593';
                                                   $objTelecomNumber->contact_number = $request->telefono;


                                                   if($objTelecomNumber->save()){

                                                       $objPartyContactMech = new PartyContactMech;
                                                       $objPartyContactMech->party_id        = $seqNextParty;
                                                       $objPartyContactMech->contact_mech_id = $seqNextContactMech;
                                                       $objPartyContactMech->role_type_id    = 'EMPLOYEE';
                                                       $objPartyContactMech->from_date       = date('Y/m/d');

                                                       if($objPartyContactMech->save()){

                                                           $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                                                   ->select('seq_id')->first()->seq_id + 1;

                                                           $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                                                           $objSequenceValueItem->seq_id = $seqNextContactMech;

                                                           if($objSequenceValueItem->save()){
                                                               $contacMechPersonPostalAddress = $seqNextContactMech;

                                                               $objContactMetch = new ContactMetch;
                                                               $objContactMetch->contact_mech_id      = $seqNextContactMech;
                                                               $objContactMetch->contact_mech_type_id = 'POSTAL_ADDRESS';

                                                               if(!$objContactMetch->save()){
                                                                   PartyContactMech::destroy($partyContrato);
                                                                   ContactMetch::destroy($contacMechPersonTelecomNumber);
                                                                   TelecomNumber::destroy($contacMechPersonTelecomNumber);
                                                                   PartyRole::destroy($partyContrato);
                                                                   PartyIdentification::destroy($partyContrato);
                                                                   Person::destroy($partyContrato);
                                                                   Party::destroy($partyContrato);
                                                                   $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                                                ha ocurrido un error al crear la contratación, intenta nuevamente
                                                                           </div>';
                                                                   return response()->json(array('status'=>false,'msg'=>$msg));
                                                               }

                                                               $objPostalAddres = new PostalAddres;
                                                               $objPostalAddres->address1              = $request->C_V;
                                                               $objPostalAddres->city                  = $request->ciudad;
                                                               $objPostalAddres->country_geo_id        = 'ECU';
                                                               $objPostalAddres->state_province_geo_id = $request->id_provincia;
                                                               $objPostalAddres->contact_mech_id       = $seqNextContactMech;

                                                               if($objPostalAddres->save()){

                                                                   $objPartyContactMech = new PartyContactMech;
                                                                   $objPartyContactMech->party_id        = $seqNextParty;
                                                                   $objPartyContactMech->contact_mech_id = $seqNextContactMech;
                                                                   $objPartyContactMech->role_type_id    = 'EMPLOYEE';
                                                                   $objPartyContactMech->from_date       = date('Y/m/d');
                                                                   if(!$objPartyContactMech->save()){
                                                                       PartyContactMech::destroy($partyContrato);
                                                                       ContactMetch::destroy($contacMechPersonTelecomNumber);
                                                                       PostalAddres::destroy($contacMechPersonPostalAddress);
                                                                       ContactMetch::destroy($contacMechPersonPostalAddress);
                                                                       PartyRole::destroy($partyContrato);
                                                                       PartyIdentification::destroy($partyContrato);
                                                                       Person::destroy($partyContrato);
                                                                       Party::destroy($partyContrato);
                                                                       $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                                                ha ocurrido un error al crear la contratación, intenta nuevamente
                                                                           </div>';
                                                                       return response()->json(array('status'=>false,'msg'=>$msg));

                                                                   }

                                                                   if((!empty($request->nombre_contacto) &&  $request->nombre_contacto != null) &&
                                                                       (!empty($request->apellido_contacto) && $request->apellido_contacto != null) &&
                                                                       (!empty($request->telefono_contacto) && $request->telefono_contacto != null)){
                                                                       //////////////////  CONTACTO ////////////////
                                                                       $seqNextPartyContacto = SequenceValueItem::where('seq_name','Party')
                                                                               ->select('seq_id')->first()->seq_id + 1;

                                                                       $objSequenceValueItem = SequenceValueItem::find('Party');
                                                                       $objSequenceValueItem->seq_id = $seqNextPartyContacto;

                                                                       if($objSequenceValueItem->save()){

                                                                           $objPartyContacto = new Party;
                                                                           $objPartyContacto->party_id      = $seqNextPartyContacto;
                                                                           $objPartyContacto->party_type_id = 'PERSON';

                                                                           if($objPartyContacto->save()){
                                                                               $objPersonContacto = new Person;
                                                                               $objPersonContacto->party_id   = $seqNextPartyContacto;
                                                                               $objPersonContacto->first_name = $request->nombre_contacto;
                                                                               $objPersonContacto->last_name  = $request->apellido_contacto;

                                                                               if($objPersonContacto->save()){

                                                                                   $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                                                                           ->select('seq_id')->first()->seq_id + 1;

                                                                                   $objSequenceValueItemContacto = SequenceValueItem::find('ContactMech');
                                                                                   $objSequenceValueItemContacto->seq_id = $seqNextContactMech;

                                                                                   if($objSequenceValueItemContacto->save()){

                                                                                       $objContactMetchContacto = new ContactMetch;
                                                                                       $objContactMetchContacto->contact_mech_id     = $seqNextContactMech;
                                                                                       $objContactMetchContacto->contact_mech_type_id='TELECOM_NUMBER';

                                                                                       if($objContactMetchContacto->save()){

                                                                                           $objTelecomNumbercontacto = new TelecomNumber;
                                                                                           $objTelecomNumbercontacto->contact_mech_id = $seqNextContactMech;
                                                                                           $objTelecomNumbercontacto->country_code    = '593';
                                                                                           $objTelecomNumbercontacto->contact_number  = $request->telefono_contacto;

                                                                                           if($objTelecomNumbercontacto->save()){

                                                                                               $objPartyRoleContacto = new PartyRole;
                                                                                               $objPartyRoleContacto->party_id    = $seqNextPartyContacto;
                                                                                               $objPartyRoleContacto->role_type_id= 'CONTACTO_EMERGENCIA';

                                                                                               if($objPartyRoleContacto->save()){

                                                                                                   $objPartyContactMechContacto = new PartyContactMech;
                                                                                                   $objPartyContactMechContacto->party_id        = $seqNextPartyContacto;
                                                                                                   $objPartyContactMechContacto->contact_mech_id = $seqNextContactMech;
                                                                                                   $objPartyContactMechContacto->role_type_id    = 'CONTACTO_EMERGENCIA';
                                                                                                   $objPartyContactMechContacto->from_date       = date('Y/m/d');

                                                                                                   if($objPartyContactMechContacto->save()){

                                                                                                       $objPartyRelationShipContacto = new PartyRelationShip;
                                                                                                       $objPartyRelationShipContacto->party_id_from     = $seqNextParty;
                                                                                                       $objPartyRelationShipContacto->party_id_to       = $seqNextPartyContacto;
                                                                                                       $objPartyRelationShipContacto->role_type_id_from = 'EMPLOYEE';
                                                                                                       $objPartyRelationShipContacto->role_type_id_to   = 'CONTACTO_EMERGENCIA';
                                                                                                       $objPartyRelationShipContacto->party_relationship_type_id ='CONTACTO_EMER';
                                                                                                       $objPartyRelationShipContacto->from_date         = date('Y/m/d');
                                                                                                       if($objPartyRelationShipContacto->save()){
                                                                                                           $f = explode("-",$request->fecha_inicio);
                                                                                                           if($request->has('activa')){
                                                                                                               $datos = [
                                                                                                                   ucwords($objConfigEmpresa[0]->nombre_empresa),
                                                                                                                   $objConfigEmpresa[0]->ruc,
                                                                                                                   $objConfigEmpresa[0]->direccion_empresa,
                                                                                                                   ucwords($objConfigEmpresa[0]->representante),
                                                                                                                   $objConfigEmpresa[0]->identificacion_representante,
                                                                                                                   $request->ciudad . " " . $request->C_V,
                                                                                                                   isset($request->id_cargo) ? Cargo::where('id_cargo',$request->id_cargo)->select('nombre')->first()->nombre : '',
                                                                                                                   isset($request->salario) ? $request->salario : '',
                                                                                                                   isset($request->horas) ? $request->horas : '',
                                                                                                                   $request->nacionalidad == null
                                                                                                                       ? $dataPerson = Person::where('person.party_id',$request->id_empleado)->select('person.nacionalidad')->first()->nacionalidad
                                                                                                                       : $request->nacionalidad,
                                                                                                                   isset($f[2]) ? $f[2] : null,
                                                                                                                   isset($f[1]) ? $f[1] : null,
                                                                                                                   isset($f[0]) ? $f[0] : null,
                                                                                                                   isset($request->cant_dias) ? $request->cant_dias : null
                                                                                                               ];
                                                                                                           }
                                                                                                           $objContrataciones = new Contrataciones;
                                                                                                           $objContrataciones->id_empleado                  = $seqNextParty;
                                                                                                           $objContrataciones->id_tipo_contrato             = $request->id_tipo_contrato;
                                                                                                           $objContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                                                                                                           $request->has('activa') ? $objContrataciones->estado = 1 : 0;

                                                                                                           if($objContrataciones->save()){
                                                                                                               $model = Contrataciones::orderBy('id_contrataciones','desc')->first();
                                                                                                               $objDetalleContratacion = new DetalleContratacion;
                                                                                                               $objDetalleContratacion->id_contrataciones           = $model->id_contrataciones;
                                                                                                               $objDetalleContratacion->id_cargo                    = $request->id_cargo;
                                                                                                               $objDetalleContratacion->fecha_expedicion_contrato   = isset($request->fecha_inicio) ? $request->fecha_inicio : null;
                                                                                                               $objDetalleContratacion->horas_jornada_laboral       = isset($request->horas) ? $request->horas : null;
                                                                                                               $objDetalleContratacion->nombre_archivo_contrato     = $request->has('activa') ? makeContrato($request->nombres,$request->apellidos, $request->identificacion,$datos,$objContrato->cuerpo_contrato) : null;
                                                                                                               $objDetalleContratacion->salario                     = isset($request->salario) ? $request->salario : '';
                                                                                                               $objDetalleContratacion->decimo_tercero              = isset($request->decimo_tercero) ? $request->decimo_tercero : null;
                                                                                                               $objDetalleContratacion->decimo_cuarto               = isset($request->decimo_cuarto) ? $request->decimo_cuarto : null;
                                                                                                               $objDetalleContratacion->fondo_reserva               = isset($request->fondo_reserva) ? $request->fondo_reserva : null;
                                                                                                               $objDetalleContratacion->cantidad_letras             = isset($request->letras) ? $request->letras : null;
                                                                                                               $objDetalleContratacion->duracion                    = isset($request->cant_dias) ? $request->cant_dias : null;
                                                                                                               $objDetalleContratacion->retencion_iva               = isset($request->retencion_iva) ? $request->retencion_iva : null;
                                                                                                               $objDetalleContratacion->retencion_renta             = isset($request->retencion_renta) ? $request->retencion_renta : null;
                                                                                                               $objDetalleContratacion->iva                         = isset($request->iva) ? $request->iva : null;
                                                                                                               if($objDetalleContratacion->save()){
                                                                                                                   $objForeginContrataciones = new ForeginContrataciones;
                                                                                                                   $objForeginContrataciones->id_contrataciones            = $model->id_contrataciones;
                                                                                                                   $objForeginContrataciones->party_id                     = $seqNextParty;
                                                                                                                   $objForeginContrataciones->id_tipo_contrato             = $request->id_tipo_contrato;
                                                                                                                   $objForeginContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                                                                                                                   $request->has('activa') ? $objForeginContrataciones->estado = 1 : 0;
                                                                                                                   if($objForeginContrataciones->save()){
                                                                                                                       $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                                                                                                                                   El contrato se ha guardado con éxito!
                                                                                                                               </div>';
                                                                                                                       $status = 1;
                                                                                                                   }

                                                                                                               }
                                                                                                           }
                                                                                                       }
                                                                                                   }
                                                                                               }
                                                                                           }
                                                                                       }
                                                                                   }
                                                                               }
                                                                           }
                                                                       }
                                                                       ///////////// FIN CONTACTO ///////////

                                                                   }

                                                                   /*if($objPartyContactMech->save()){


                                                                   }*/
                                                               }else{
                                                                   PartyContactMech::destroy($partyContrato);
                                                                   ContactMetch::destroy($contacMechPersonEmailAddress);
                                                                   ContactMetch::destroy($contacMechPersonTelecomNumber);
                                                                   PartyRole::destroy($partyContrato);
                                                                   PartyIdentification::destroy($partyContrato);
                                                                   Person::destroy($partyContrato);
                                                                   Party::destroy($partyContrato);
                                                                   $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                                                ha ocurrido un erro al crear la contratación, intenta nuevamente
                                                                           </div>';
                                                                   return response()->json(array('status'=>false,'msg'=>$msg));
                                                               }
                                                           }
                                                       }
                                                   }else{
                                                       ContactMetch::destroy($contacMechPersonTelecomNumber);
                                                       PartyRole::destroy($partyContrato);
                                                       PartyIdentification::destroy($partyContrato);
                                                       Person::destroy($partyContrato);
                                                       Party::destroy($partyContrato);
                                                       $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                                    ha ocurrido un erro al crear la contratación, intenta nuevamente
                                                               </div>';
                                                       return response()->json(array('status'=>false,'msg'=>$msg));
                                                   }
                                               }
                                           }else{
                                               PartyRole::destroy($partyContrato);
                                               PartyIdentification::destroy($partyContrato);
                                               Person::destroy($partyContrato);
                                               Party::destroy($partyContrato);
                                               $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                                            ha ocurrido un erro al crear la contratación, intenta nuevamente
                                                       </div>';
                                               return response()->json(array('status'=>false,'msg'=>$msg));
                                           }
                                       }
                                   }else{
                                       PartyIdentification::destroy($partyContrato);
                                       Person::destroy($partyContrato);
                                       Party::destroy($partyContrato);
                                       $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                            ha ocurrido un erro al crear la contratación, intenta nuevamente
                                       </div>';
                                       return response()->json(array('status'=>false,'msg'=>$msg));
                                   }
                               }else{
                                   Person::destroy($partyContrato);
                                   Party::destroy($partyContrato);
                                   $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                            ha ocurrido un erro al crear la contratación, intenta nuevamente
                                       </div>';
                                   return response()->json(array('status'=>false,'msg'=>$msg));
                               }
                           }else{
                               Party::destroy($partyContrato);
                               $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                                            ha ocurrido un erro al crear la contratación, intenta nuevamente
                                       </div>';
                               return response()->json(array('status'=>false,'msg'=>$msg));
                           }
                       }
                   }
               }
           }else{// USUARIO DATOS REHUSADOS

                if(getExistContrataciones($request->id_empleado)){
                    $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                               El empleado ya tiene ambos contratos activos actualmente (Contratación y Confidencialidad)
                             </div>';
                    $status = 0;

                }else{

                    if($request->has('C_V') || $request->has('ciudad') ){
                        $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                ->select('seq_id')->first()->seq_id + 1;

                        $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                        $objSequenceValueItem->seq_id = $seqNextContactMech;

                        if($objSequenceValueItem->save()){

                            $objContactMech = new ContactMetch;
                            $objContactMech->contact_mech_id      = $seqNextContactMech;
                            $objContactMech->contact_mech_type_id = 'POSTAL_ADDRESS';

                            if($objContactMech->save()){
                                $objPostalAddres = new PostalAddres;
                                $objPostalAddres->address1              = $request->C_V;
                                $objPostalAddres->city                  = $request->ciudad;
                                $objPostalAddres->country_geo_id        = 'ECU';
                                $objPostalAddres->state_province_geo_id = $request->id_provincia;
                                $objPostalAddres->contact_mech_id       = $seqNextContactMech;
                                if($objPostalAddres->save()){
                                    $objPartyContactMech = new PartyContactMech;
                                    $objPartyContactMech->party_id        = $request->id_empleado;
                                    $objPartyContactMech->contact_mech_id = $seqNextContactMech;
                                    $objPartyContactMech->role_type_id    = 'EMPLOYEE';
                                    $objPartyContactMech->from_date       = date('Y/m/d');
                                    $objPartyContactMech->save();
                                }
                            }
                        }

                    }

                    if($request->has('correo')){
                        $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                ->select('seq_id')->first()->seq_id + 1;

                        $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                        $objSequenceValueItem->seq_id = $seqNextContactMech;

                        if($objSequenceValueItem->save()){
                            $objContactMetch = new ContactMetch;
                            $objContactMetch->contact_mech_id      = $seqNextContactMech;
                            $objContactMetch->contact_mech_type_id = 'EMAIL_ADDRESS';
                            $objContactMetch->info_string          =  $request->correo;
                            if($objContactMetch->save()){
                                $objPartyContactMech = new PartyContactMech;
                                $objPartyContactMech->party_id        = $request->id_empleado;
                                $objPartyContactMech->contact_mech_id = $seqNextContactMech;
                                $objPartyContactMech->role_type_id    = 'EMPLOYEE';
                                $objPartyContactMech->from_date       = date('Y/m/d');}
                                $objPartyContactMech->save();
                        }
                    }

                    if($request->has('telefono')){
                        $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                ->select('seq_id')->first()->seq_id + 1;

                        $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                        $objSequenceValueItem->seq_id = $seqNextContactMech;

                        if($objSequenceValueItem->save()) {

                            $objContactMetch = new ContactMetch;
                            $objContactMetch->contact_mech_id = $seqNextContactMech;
                            $objContactMetch->contact_mech_type_id = 'TELECOM_NUMBER';

                            if ($objContactMetch->save()) {

                                $objTelecomNumber = new TelecomNumber;
                                $objTelecomNumber->contact_mech_id = $seqNextContactMech;
                                $objTelecomNumber->country_code = '593';
                                $objTelecomNumber->contact_number = $request->telefono;

                                if ($objTelecomNumber->save()) {

                                    $objPartyContactMech = new PartyContactMech;
                                    $objPartyContactMech->party_id = $request->id_empleado;
                                    $objPartyContactMech->contact_mech_id = $seqNextContactMech;
                                    $objPartyContactMech->role_type_id = 'EMPLOYEE';
                                    $objPartyContactMech->from_date = date('Y/m/d');
                                    $objPartyContactMech->save();
                                }
                            }
                        }
                    }

                    $dataPerson = Person::where([
                        ['person.party_id',$request->id_empleado],
                        ['pr.role_type_id','EMPLOYEE']
                    ])->join('party_role as pr','person.party_id','pr.party_id')
                        ->join('party_identification as pi', 'person.party_id','=','pi.party_id')
                        ->select('person.first_name','person.last_name','pi.id_value','person.nacionalidad')->first();

                    if($dataPerson->nacionalidad == "" || $dataPerson->nacionalidad == null){
                        $objPerson = Person::where('party_id',$request->id_empleado);
                        $objPerson->update(['nacionalidad'=>$request->nacionalidad]);
                    }


                    $f = explode("-",$request->fecha_inicio);
                    $postalAdress = getPostalAddres($request->id_empleado);

                    if($request->has('activa')) {
                        $datos = [
                            ucwords($objConfigEmpresa[0]->nombre_empresa),
                            $objConfigEmpresa[0]->ruc,
                            $objConfigEmpresa[0]->direccion_empresa,
                            ucwords($objConfigEmpresa[0]->representante),
                            $objConfigEmpresa[0]->identificacion_representante,
                            ucwords((isset($postalAdress->city) ? $postalAdress->city : $request->ciudad) . " " . (isset($postalAdress->address1) ? $postalAdress->address1 : $request->C_V)),
                            isset($request->id_cargo) ? Cargo::where('id_cargo',$request->id_cargo)->select('nombre')->first()->nombre : null,
                            isset($request->salario) ? $request->salario : null,
                            isset($request->horas) ? $request->horas : null,
                            $dataPerson->nacionalidad,
                            isset($f[2]) ? $f[2] : null,
                            isset($f[1]) ? $f[1] : null,
                            isset($f[0]) ? $f[0] : null,
                            isset($request->cant_dias) ? $request->cant_dias : null
                        ];
                    }

                    $objContrataciones = new Contrataciones;
                    $objContrataciones->id_empleado                  = $request->id_empleado;
                    $objContrataciones->id_tipo_contrato             = $request->id_tipo_contrato;
                    $objContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                    $request->has('activa') ? $objContrataciones->estado = 1 : 0;

                    if($objContrataciones->save()) {

                        $model = Contrataciones::orderBy('id_contrataciones','desc')->first();
                        $objDetalleContratacion = new DetalleContratacion;
                        $objDetalleContratacion->id_contrataciones           = $model->id_contrataciones;
                        $objDetalleContratacion->id_cargo                    = isset($request->id_cargo) ? $request->id_cargo : null;
                        $objDetalleContratacion->fecha_expedicion_contrato   = isset($request->fecha_inicio) ? $request->fecha_inicio : null;//isset($fechaInicioFormateada) ? $fechaInicioFormateada : null;
                        $objDetalleContratacion->horas_jornada_laboral       = isset($request->horas) ? $request->horas : null; //isset($horasTrabajo) ? $horasTrabajo : null;
                        $objDetalleContratacion->nombre_archivo_contrato     = $request->has('activa') ? makeContrato($dataPerson->first_name,$dataPerson->last_name,$dataPerson->id_value,$datos,$objContrato->cuerpo_contrato) : null;
                        $objDetalleContratacion->salario                     = isset($request->salario) ? $request->salario : null;
                        $objDetalleContratacion->decimo_tercero              = isset($request->decimo_tercero) ? $request->decimo_tercero : null;
                        $objDetalleContratacion->decimo_cuarto               = isset($request->decimo_cuarto) ? $request->decimo_cuarto : null;
                        $objDetalleContratacion->fondo_reserva               = isset($request->fondo_reserva) ? $request->fondo_reserva : null;
                        $objDetalleContratacion->cantidad_letras             = isset($request->letras) ? $request->letras : null;
                        $objDetalleContratacion->duracion                    = isset($request->cant_dias) ? $request->cant_dias : null;
                        $objDetalleContratacion->retencion_iva               = isset($request->retencion_iva) ? $request->retencion_iva : null;
                        $objDetalleContratacion->retencion_renta             = isset($request->retencion_renta) ? $request->retencion_renta : null;
                        $objDetalleContratacion->iva                         = isset($request->iva) ? $request->iva : null;

                        if($objDetalleContratacion->save()){

                            $objForeginContrataciones = new ForeginContrataciones;
                            $objForeginContrataciones->id_contrataciones            = $model->id_contrataciones;
                            $objForeginContrataciones->party_id                     = $request->id_empleado;
                            $objForeginContrataciones->id_tipo_contrato             = $request->id_tipo_contrato;
                            $objForeginContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                            $request->has('activa') ? $objForeginContrataciones->estado = 1 : 0;

                            if ($objForeginContrataciones->save()) {

                                $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                                            El contrato se ha guardado con exito!
                                        </div>';
                                $status = 1;

                                $existPartyRoleEmpleado = PartyRole::where([
                                    ['party',$request->id_empleado],
                                    ['role_type_id','EMPLOYEE']
                                ])->exist();
                                if(!$existPartyRoleEmpleado){
                                    $partyRole = new PartyRole;
                                    $partyRole->party_id=$request->id_empleado;
                                    $partyRole->role_type_id ='EMPLOYEE';
                                    $partyRole->status = 1;
                                    $partyRole->save();
                                }
                            }
                        }
                    }
                }
           }



       }else {
           $errores = '';
           foreach ($valida->errors()->all() as $mi_error) {
               if ($errores == '') {
                   $errores = '<li>' . $mi_error . '</li>';
               } else {
                   $errores .= '<li>' . $mi_error . '</li>';
               }
           }
           $msg = '<div class="alert alert-danger">' .
               '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
               '<ul>' .
               $errores .
               '</ul>' .
               '</div>';
           $status = 0;
       }
       return response()->json(array('status'=>$status,'msg'=>$msg));
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        $objContrato = Contrato::where('id_tipo_contrato',$request->id_tipo_contrato)
        ->select('cuerpo_contrato')->first();


        $dataEmpleados = PartyRole::join('person as p', 'party_role.party_id','=','p.party_id')
            ->where('party_role.role_type_id','EMPLOYEE')
            ->select('p.first_name','p.last_name','p.party_id')->get();

        $a = [];
        $b = [];
        $c = [];
        foreach ($dataEmpleados as $data){

            $contrataciones = ForeginContrataciones::where('contrataciones.party_id',$data->party_id)
            ->join('person as p', 'contrataciones.party_id','p.party_id')->where('estado',1)->get();

            /*if($contrataciones->count() != 2){

                for($i=0;$i<$contrataciones->count();$i++):
                    if($contrataciones[$i]->id_tipo_contrato_descripcion != tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion)
                        $a[]= ['nombre'=> $contrataciones[$i]->first_name." ".$contrataciones[$i]->last_name,'id_empleado'=>$contrataciones[$i]->party_id];
                endfor;
            }*/

            if($contrataciones->count() < 1)
                $b[] =  ['nombre'=> $data->first_name ." ". $data->last_name,'id_empleado'=>$data->party_id];

            $c = array_merge($a,$b);

        }

        $tipoContratoDescripcion = tipoContratoDescripcion($request->id_tipo_contrato);

        return response()->json([
            'tipo_contrato_descripcion' => $tipoContratoDescripcion->id_tipo_contrato_descripcion,
            'relacion_dependencia'      => $tipoContratoDescripcion->relacion_dependencia,
            'body'                      => $objContrato->cuerpo_contrato,
            'dataEmpleados'             => $c,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request)
    {

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function inputsEmpleados(Request $request){

        $dataEmpleado = PartyRole::where([
            ['party_role.role_type_id','EMPLOYEE'],
            ['party_role.party_id',$request->party_id]
        ])->join('person as p', 'party_role.party_id','=','p.party_id')
            ->join('party_identification as pi','p.party_id','=','pi.party_id')
            ->join('party_contact_mech as pcm', 'p.party_id','=','pcm.party_id')
            ->join('contact_mech as cm','pcm.contact_mech_id','=','cm.contact_mech_id');

        $existPartyRelationship = PartyRelationShip::where('party_id_from',$request->party_id)->first();

        if($existPartyRelationship!=null){
            $dataEmpleado->join('party_relationship as prs','party_role.party_id','prs.party_id_from')
                ->join('person as per', 'prs.party_id_to','=','per.party_id')
                ->join('party_contact_mech as pcmc', 'per.party_id','=','pcmc.party_id');
        }

        $dataEmpleado->select(
                'p.party_id',
                'p.first_name',
                'p.first_name',
                'p.last_name',
                'p.nacionalidad',
                'party_role.role_type_id',
                'p.gender',
                'p.birth_date',
                'pi.party_identification_type_id',
                'pi.id_value',
                'cm.info_string',
                ($existPartyRelationship!=null ? 'per.party_id as party_id_contact' : 'cm.info_string' ),
                ($existPartyRelationship!=null ? 'per.first_name as first_name_contact' : 'cm.info_string' ),
                ($existPartyRelationship!=null ? 'per.last_name as last_name_contact' : 'cm.info_string' )
            );

        return view('layouts.views.contrataciones.partials.inputs_datos_nuevo_empleado',
            [
                'dataTipoIdentificacionGrupo' => TipoIdentificacionGrupo::select('party_identification_type_id','description')->get(),
                'dataProvinicias' =>Geo::where([
                    ['geo_type_id','PROVINCE'],
                    ['geo_id', 'like', 'EC%']
                ])->get(),
                'vista' => $request->vista,
                'dataEmpleados' => $dataEmpleado->first()

            ]);
    }

    public function formTerminacionContrato(Request $request){

        $contratacion = Contrataciones::where('id_contrataciones',$request->id_contrato)
            ->join('tipo_contrato as tc','contrataciones.id_tipo_contrato','tc.id_tipo_contrato')->select('relacion_dependencia')->first();


        $contratacion->relacion_dependencia
            ? $motivosAnulaciones= MotivoAnulacion::where('calcula_liquidacion',true)->orWhere('calcula_liquidacion',false)->get()
            : $motivosAnulaciones= MotivoAnulacion::where([
                ['calcula_liquidacion',false],
                ['desahucio',false],
                ['despido_intempestivo', false]
            ])->orWhere([
                ['calcula_liquidacion',true],
                ['desahucio',false],
                ['despido_intempestivo', false]
            ])->get();

        return view('layouts.views.contrataciones.partials.form_anulacion_contrato',[
                'dataMotivoAnulacion'=> $motivosAnulaciones,
                'idContrato'=>$request->id_contrato,
                'relacion_dependencia' =>  $contratacion->relacion_dependencia
        ]);
    }

    public function terminarContrato(Request $request)
    {

        $valida = Validator::make($request->all(),[
            'id_motivo_anulacion' => 'required',
            'fecha_terminacion'=> 'required'
        ],[
            'id_motivo_anulacion.required'=>'Debe seleccionar un motivo para la terminación del contrato',
            'fecha_terminacion.required' => "Debe seleccionar la fecha de terminación de la contratación"
        ]);

        if (!$valida->fails()) {

            $dataMotivoTerminacion = MotivoAnulacion::where('id_motivo_anulacion',$request->id_motivo_anulacion)->first();

            if($dataMotivoTerminacion->calcula_liquidacion){

                $dataContratacion = Contrataciones::where([
                    ['contrataciones.id_contrataciones',$request->id_contrataciones],
                    ['contrataciones.estado',1],
                    ['contrataciones.id_tipo_contrato_descripcion',2]
                ])->join('detalles_contrataciones as dc','contrataciones.id_contrataciones','dc.id_contrataciones')
                    ->join('tipo_contrato as tc','contrataciones.id_tipo_contrato','tc.id_tipo_contrato')
                    ->join('cargos as c','dc.id_cargo','c.id_cargo')
                    ->select('relacion_dependencia','id_empleado','vacaciones','fecha_expedicion_contrato','contrataciones.id_contrataciones','salario','tc.horas_extras','c.nombre')->first();

                $ultimoSalario = Nomina::where('id_empleado',$dataContratacion->id_empleado)->select('total')->get()->last();

                $dataPerson = Person::where('person.party_id',$dataContratacion->id_empleado)
                    ->join('party_identification as pi','person.party_id','pi.party_id')
                    ->join('party_identification_type as pit','pi.party_identification_type_id','pit.party_identification_type_id')
                    ->select('first_name','last_name','id_value','pit.description','person.party_id')->first();

                $montoHorasExtras = "N/A";
                $montoDecimoTercerSueldo = "N/A";
                $montoDecimoCuartoSueldo = "N/A";
                $montoVacaciones = "N/A";
                $montoDesahucio = "N/A";
                $montoSalario = 0.00;
                $montoDespidoIntempestivo = "N/A";
                $bono25 ='N/A';
                $vistoBueno ='N/A';
                $despidoIneficaz='N/A';
                $indemnizacionDiscapacidad ='N/A';
                $terminacionAntesPlazo = 'N/A';
                $montoBonosFijos = 0.00;

                ////////// SALARIO //////////
                $existNomina = Nomina::where([
                    ['id_empleado',$dataContratacion->id_empleado],
                    ['id_contrataciones',$dataContratacion->id_contrataciones]
                ])->get();

                if(count($existNomina)>0){
                    $diasTrabajadosMesActual = Carbon::parse($request->fecha_terminacion)->diffInDays(Carbon::parse($request->fecha_terminacion)->format('Y-m-01'))+1;
                }else{

                   $finMesInicioContratacion = Carbon::parse($dataContratacion->fecha_expedicion_contrato)->endOfMonth()->format('d');

                   if($finMesInicioContratacion < 31){
                       $diasTrabajadosMesActual =  (int)Carbon::parse($request->fecha_terminacion)->diffInDays($dataContratacion->fecha_expedicion_contrato)+1;
                   }else{
                       $diasTrabajadosMesActual =  (int)Carbon::parse($request->fecha_terminacion)->diffInDays($dataContratacion->fecha_expedicion_contrato)-1;
                   }

                }

                $mesTerminacionContrato = Carbon::parse($request->fecha_terminacion)->format('m');

                if(($mesTerminacionContrato == "02" && $diasTrabajadosMesActual == 28) || (Carbon::parse($request->fecha_terminacion)->format('m') == "02" && $diasTrabajadosMesActual == 29)){
                    $dias = 30;
                }else{
                    $dias = $diasTrabajadosMesActual == 31 ? 30 :  $diasTrabajadosMesActual;
                }

                $ultimaNomina = Nomina::where([
                    ['id_empleado',$dataContratacion->id_empleado],
                    ['id_contrataciones',$dataContratacion->id_contrataciones],
                ])->select('fecha_nomina')->get()->last();
		dd($ultimaNomina);
                $mesUltimaNomina = Carbon::parse($ultimaNomina->fecha_nomina)->format('m');

                if($mesUltimaNomina < $mesTerminacionContrato)
                    $montoSalario = number_format(($dataContratacion->salario/30) * $dias,2,".","");

                ////////// FIN SALARIO //////////


                ////////// OTROS CÁCULOS //////////

                if($dataContratacion->horas_extras)
                    $montoHorasExtras = number_format(getHorasExtras($dataContratacion->id_empleado, $request->store,$dataContratacion->fecha_expedicion_contrato,$request->fecha_terminacion),2,".","");


                $comisiones = Comisiones::where([
                    ['id_empleado',$dataContratacion->id_empleado],
                    ['pagada',0]
                ])->join('tipo_comisiones as tc','comisiones.id_tipo_comision','tc.id_tipo_comision')->get();

                $montoComisiones = 0.00;
                foreach ($comisiones as $comision){
                    $montoComisiones += number_format($comision->estandar,2,".","");

                    if($request->store == 1) {
                        $objComsiones = Comisiones::find($comision->id_comisiones);
                        $objComsiones->pagada = 1;
                        $objComsiones->save();
                    }
                }

                //--------------------------//
                $consumos = Consumos::where([
                    ['id_empleado',$dataContratacion->id_empleado],
                    ['estado',0],
                ])->get();

                $montoConsumos = 0.00;
                foreach ($consumos as $c) {
                    $montoConsumos += number_format($c->monto_descuento,2,".","");

                    $objConsumo = Consumos::find($c->id_consumo);
                    $objConsumo->estado = 1;
                    $objConsumo->save();
                }
                //--------------------------//

                //--------------------------//
                $anticipos = Anticipos::where([
                    ['id_empleado',$dataContratacion->id_empleado],
                    ['estado',1],
                    ['descontado',0]
                ])->get();

                $montoAnticipos = 0.00;
                foreach ($anticipos as $a){
                    $montoAnticipos += number_format($a->cantidad,2,".","");

                    if($request->store == 1) {
                        $objAnticipos = Anticipos::find($a->id_anticipo);
                        $objAnticipos->descontado = 1;
                        $objAnticipos->save();
                    }
                }
                //--------------------------//

                //--------------------------//
                $montoDescuentos = 0.00;
                $otrosDescuentos = OtrosDescuentos::where([
                    ['id_empleado',$dataContratacion->id_empleado],
                    ['descontado',0]
                ])->get();

                foreach($otrosDescuentos as $descuento){
                    $montoDescuentos += $descuento->cantidad;

                    if($request->store == 1) {
                        $objDecuentos = OtrosDescuentos::find($descuento->id_descuento);
                        $objDecuentos->descontado = 1;
                        $objDecuentos->save();
                    }
                }
                //--------------------------//

                ////////// FIN OTROS CÁCULOS //////////


                $diasTrabajados = Carbon::parse($dataContratacion->fecha_expedicion_contrato)->diffInDays($request->fecha_terminacion);
                $annosCompletosTrabajados = round(($diasTrabajados/365), 0, PHP_ROUND_HALF_DOWN);

                $remuneracion = $montoHorasExtras != "N/A" ? ($dataContratacion->salario + $montoHorasExtras) : $dataContratacion->salario;

                if($dataContratacion->relacion_dependencia && isset($ultimoSalario->total)){

                    /// BONO 25% /////
                    if($request->bono_25_porciento== "true")
                        $bono25 = $remuneracion / 4 * $annosCompletosTrabajados;
                    /// BONO 25% /////


                    //// VISTO BUENO ////
                    if($request->visto_bueno== "true")
                        $vistoBueno = $remuneracion*12;
                    //// FIN VISTO BUENO ////


                    //// DESPIDO INEFICAZ ////
                    if($request->despido_ineficaz== "true")
                        $despidoIneficaz = $remuneracion*12;
                    //// FIN DESPIDO INEFICAZ ////


                    ///// INDEMNIZACION POR DISCAPACIDAD  /////
                    if($request->indemnizacion_discapacidad== "true")
                        $indemnizacionDiscapacidad = $remuneracion*6;
                    ///// FIN INDEMNIZACION POR DISCAPACIDAD  /////

                    /////// DECIMO TERCER SUELDO ///////

                    $totalSueldosDecimoTercero = 0.00;

                    $fechaInicioCalculo = Carbon::parse($request->fecha_terminacion)->subYear(1)->format('Y-12-01');
                    $fechaFinCalculo = Carbon::parse($request->fecha_terminacion)->format('Y-m-d');

                    $dataNomina = Nomina::where('id_empleado',$dataContratacion->id_empleado)
                        ->whereBetween('fecha_nomina',[$fechaInicioCalculo,$fechaFinCalculo])
                        ->select('total')->get();

                    foreach ($dataNomina as $dN)
                        $totalSueldosDecimoTercero += $dN->total;

                    $mesesTrabajadosUltimoAnno = Carbon::parse($fechaFinCalculo)->diffInMonths(Carbon::parse($fechaInicioCalculo));

                    $montoDecimoTercerSueldo = number_format(($totalSueldosDecimoTercero/12)*$mesesTrabajadosUltimoAnno,2,".","");

                    /////// FIN DECIMO TERCER SUELDO ///////

                    /////// DECIMO CUARTO SUELDO ///////

                    $fechaInicioCalculo = Carbon::parse($request->fecha_terminacion)->subYear(1)->format('Y-08-01');
                    $dataConfiguracionEmpresa = ConfiguracionVariablesEmpresa::select('sueldo_basico_unificado_vigente')->first();
                    $diasTrabajadosUltimoAnno = Carbon::parse($fechaFinCalculo)->diffInDays($fechaInicioCalculo);

                    if(Carbon::parse($request->fecha_terminacion)->format('H:i:s') > Carbon::parse($request->fecha_terminacion)->format('18:00:00'))
                        $diasTrabajadosUltimoAnno = $diasTrabajadosUltimoAnno+1;

                    $montoDecimoCuartoSueldo = number_format(($dataConfiguracionEmpresa->sueldo_basico_unificado_vigente/360)*$diasTrabajadosUltimoAnno,2,".","");

                    /////// FIN DECIMO CUARTO SUELDO ///////


                    /////// VACACIONES NO GOZADAS ////////

                    $dataVacaciones = Vacaciones::where([
                        ['id_empleado',$dataContratacion->id_empleado],
                        ['estado',3]
                    ])->select('fecha_fin')->get()->last();
                    $fechaInicioCalculo = isset($dataVacaciones->fecha_fin) ? Carbon::parse($dataVacaciones->fecha_fin)->addDays(1)->format('Y-m-d') : $dataContratacion->fecha_expedicion_contrato;

                    $dataNomina = Nomina::where('id_empleado',$dataContratacion->id_empleado)
                        ->whereBetween('fecha_nomina',[$fechaInicioCalculo,$fechaFinCalculo])
                        ->select('total')->get();

                    $totalSueldosVacaciones = 0.00;
                    foreach ($dataNomina as $dN)
                        $totalSueldosVacaciones += $dN->total;

                    $montoVacaciones = number_format((($totalSueldosVacaciones*12)/360)*$dataContratacion->vacaciones,2,".","");

                    /////// FIN VACACIONES NO GOZADAS ////////


                    //////////// DESAHUCIO /////////////
                    if($dataMotivoTerminacion->desahucio)
                        $montoDesahucio = number_format((($montoHorasExtras != "N/A" ? ($dataContratacion->salario+$montoHorasExtras) : $dataContratacion->salario)/4)*$annosCompletosTrabajados,2,".","");

                    //////////// FIN DESAHUCIO /////////////

                    //////////// DESPIDO INTEMPESTIVO ///////////
                    if($dataMotivoTerminacion->despido_intempestivo) {
                        $annosRedondeado = round(($diasTrabajados/365), 0, PHP_ROUND_HALF_UP);
                        ($annosRedondeado < 4)
                            ? $montoDespidoIntempestivo = number_format((($montoHorasExtras != "N/A" ? ($dataContratacion->salario+$montoHorasExtras) : $dataContratacion->salario) * 3),2,".","")
                            : $montoDespidoIntempestivo = number_format((($montoHorasExtras != "N/A" ? ($dataContratacion->salario+$montoHorasExtras) : $dataContratacion->salario) * $annosRedondeado),2,".","");
                    }
                    //////////// FIN DESPIDO INTEMPESTIVO ///////////

                }else{
                    if($request->terminación_antes_plazo=="true"){
                        $diasFaltantes = Carbon::parse($dataContratacion->fecha_expiracion_contrato)->diffInDays($request->fecha_terminacion)+1;
                        $terminacionAntesPlazo = ($remuneracion/2)*$diasFaltantes;
                    }
                }

                $arrBonosFijos   = getBonosFijos($dataContratacion->id_contrataciones,true,$diasTrabajadosMesActual,Carbon::parse($request->fecha_terminacion)->toDateString());
                $arrPrestamos    = getPrestamos($dataContratacion->id_contrataciones,$request->store,true,Carbon::parse($request->fecha_terminacion)->toDateString());

                $dataLiquidacion = [
                    'nombreEmpleado'          => $dataPerson->first_name . " " . $dataPerson->last_name,
                    'documento'               => $dataPerson->description,
                    'identificacion'          => $dataPerson->id_value,
                    'cargo'                   => $dataContratacion->nombre,
                    'idContrato'              => $dataContratacion->id_contrataciones,
                    'montoDecimoTercerSueldo' => $montoDecimoTercerSueldo,
                    'montoDecimoCuartoSueldo' => $montoDecimoCuartoSueldo,
                    'montoVacaciones'         => $montoVacaciones,
                    'montoDesahucio'          => $montoDesahucio,
                    'montoDespidoIntempestivo'=> $montoDespidoIntempestivo,
                    'montoHorasExtras'        => $montoHorasExtras,
                    'montoComisiones'         => $montoComisiones,
                    'arrPrestamos'            => $arrPrestamos['arrPrestamos'],
                    'arr_bonos_fijos'         => $arrBonosFijos['arrBonosFijos'],
                    'montoConsumos'           => number_format($montoConsumos,2,".",""),
                    'montoAnticipos'          => $montoAnticipos,
                    'montoSalario'            => $montoSalario,
                    'montoDescuentos'         => $montoDescuentos,
                    'diasTrabajadosMesActual' => $diasTrabajadosMesActual,
                    'montoTotalIngresos'      => $montoSalario + $montoComisiones + (is_numeric($montoDecimoTercerSueldo) ? $montoDecimoTercerSueldo : 0) +(is_numeric($montoDecimoCuartoSueldo) ? $montoDecimoCuartoSueldo : 0) + (is_numeric($montoVacaciones) ? $montoVacaciones : 0) + (is_numeric($montoDesahucio) ? $montoDesahucio : 0) + (is_numeric($montoDespidoIntempestivo) ? $montoDespidoIntempestivo : 0) + (is_numeric($montoHorasExtras) ? $montoHorasExtras : 0) + ($arrBonosFijos['montoBonosFijos']) + (is_numeric($bono25) ? $bono25 : 0) + (is_numeric($vistoBueno) ? $vistoBueno : 0) + (is_numeric($despidoIneficaz) ? $despidoIneficaz : 0) + (is_numeric($indemnizacionDiscapacidad) ? $indemnizacionDiscapacidad : 0),
                    'montoTotalEgresos'       => $montoConsumos + $montoAnticipos + $montoDescuentos + $arrPrestamos['montoPrestamos'],
                    'montoTotalARecibir'      => $montoSalario + $montoComisiones + (is_numeric($montoDecimoTercerSueldo) ? $montoDecimoTercerSueldo : 0) + (is_numeric($montoDecimoCuartoSueldo) ? $montoDecimoCuartoSueldo : 0) + (is_numeric($montoVacaciones) ? $montoVacaciones : 0) + (is_numeric($montoDesahucio) ? $montoDesahucio : 0) + (is_numeric($montoDespidoIntempestivo) ? $montoDespidoIntempestivo : 0) + (is_numeric($montoHorasExtras) ? $montoHorasExtras : 0) + ($arrBonosFijos['montoBonosFijos']) - $montoConsumos - $montoAnticipos - $montoDescuentos - $arrPrestamos['montoPrestamos'] + (is_numeric($bono25) ? $bono25 : 0) + (is_numeric($vistoBueno) ? $vistoBueno : 0) + (is_numeric($despidoIneficaz) ? $despidoIneficaz : 0) + (is_numeric($indemnizacionDiscapacidad) ? $indemnizacionDiscapacidad : 0),
                    'bono25'                  => $bono25,
                    'vistoBueno'              => $vistoBueno,
                    'despidoIneficaz'         => $despidoIneficaz,
                    'indemnizacionDiscapacidad' => $indemnizacionDiscapacidad,
                    'terminacionAntesPlazo' => $terminacionAntesPlazo

                ];

                if($request->store == 0) {
                    return view('layouts.views.contrataciones.partials.vista_liquidacion', [
                        'dataLiquidacion' => $dataLiquidacion,
                        'id_motivo_anulacion' => $request->id_motivo_anulacion,
                        'fechaTerminacion' => $request->fecha_terminacion
                    ]);

                }else{

                    $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                           ha ocurrido un error al intentar terminar el contrato, intente nuevamente!
                        </div>';
                    $status = 0;
                    $objFinalizacionContratacion = new FinalizacionContratacion;
                    $objFinalizacionContratacion->id_contrataciones = $request->id_contrataciones;
                    $objFinalizacionContratacion->id_tipo_finalizacion = $request->id_motivo_anulacion;
                    $objFinalizacionContratacion->fecha_finalizacion = $request->fecha_terminacion;

                    if ($objFinalizacionContratacion->save()) {

                        $modelFinalizacionContratacion = FinalizacionContratacion::all()->last();

                        $objForeignContrataciones = ForeginContrataciones::find($request->id_contrataciones);
                        $objForeignContrataciones->estado = 3;

                        if ($objForeignContrataciones->save()) {

                            $objContrataciones = Contrataciones::find($request->id_contrataciones);
                            $objContrataciones->estado = 3;

                            if ($objContrataciones->save()) {

                                $dataContratacionConfidencialidad = Contrataciones::where([
                                    ['id_empleado',$dataPerson->party_id],
                                    ['id_tipo_contrato_descripcion',1],
                                    ['estado',1]
                                ])->first();

                                if(isset($dataContratacionConfidencialidad->id_contrataciones) && $dataContratacionConfidencialidad->id_contrataciones != null){
                                    $objContratacionesConfidencialidad = Contrataciones::find($dataContratacionConfidencialidad->id_contrataciones);
                                    $objContratacionesConfidencialidad->estado = 3;
                                    $objContratacionesConfidencialidad->save();

                                    $objForeginContratacionesConfidencialidad = ForeginContrataciones::find($dataContratacionConfidencialidad->id_contrataciones);
                                    $objForeginContratacionesConfidencialidad->estado = 3;
                                    $objForeginContratacionesConfidencialidad->save();

                                }

                                // $modelContrataciones = Contrataciones::all()->last();

                                $view = \View::make('layouts.views.nomina.partials.rol_pago_liquidacion', compact('dataLiquidacion'))->render();
                                $pdf = \App::make('dompdf.wrapper');
                                $pdf->loadHTML($view);
                                $nombre_archivo = $request->fecha_terminacion."_liquidacion_".$dataLiquidacion['identificacion']."_".$dataLiquidacion['nombreEmpleado'].".pdf";
                                $pdf->save(public_path('roles_pago') . '/'.$nombre_archivo);

                                $idEmpleado = Contrataciones::where('id_contrataciones',$dataLiquidacion['idContrato'])->select('id_empleado')->first()->id_empleado;

                                $objImagenRoles = new ImagenesRoles;
                                $objImagenRoles->fecha_nomina  = Carbon::parse($request->fecha_terminacion)->format("Y-m-05");
                                $objImagenRoles->nombre_imagen = $nombre_archivo;
                                $objImagenRoles->id_empleado   = $idEmpleado;
                                $objImagenRoles->tipo          = 2;

                                if($objImagenRoles->save()){

                                    $modelImagenRoles = ImagenesRoles::all()->last();

                                    $objNomina = new Nomina;
                                    $objNomina->id_empleado  = $idEmpleado;
                                    $objNomina->fecha_nomina = Carbon::parse($request->fecha_terminacion)->format('Y-m-05');
                                    $objNomina->total        = number_format($dataLiquidacion['montoTotalARecibir'],2,".","");
                                    $objNomina->id_contrataciones = $request->id_contrataciones;
                                    $objNomina->liquidacion = 1;

                                    if($objNomina->save()){

                                        flash('<i class="fa fa-exclamation-circle" aria-hidden="true"></i> La liquidación se ha generado con exito y a continuación se muestra el rol de pago')->success();
                                        return view('layouts.views.nomina.partials.rol_pago_liquidacion',[
                                            'dataLiquidacion' => $dataLiquidacion
                                        ]);

                                    }else{
                                        FinalizacionContratacion::destroy($modelFinalizacionContratacion->id_finalizacion_contrataciones);
                                        Contrataciones::where('id_contrataciones',$request->id_contrataciones)->update(['estado'=>1]);
                                        ForeginContrataciones::where('id_contrataciones',$request->id_contrataciones)->update(['estado'=>1]);
                                        ImagenesRoles::destroy($modelImagenRoles->id_imagen_rol);
                                    }

                                }else{
                                    ForeginContrataciones::where('id_contrataciones', $request->id_contrataciones)->update(['estado' => 1]);
                                    FinalizacionContratacion::destroy($modelFinalizacionContratacion->id_finalizacion_contrataciones);
                                    Contrataciones::where('id_contrataciones', $request->id_contrataciones)->update(['estado' => 1]);
                                }
                            }else {
                                ForeginContrataciones::where('id_contrataciones', $request->id_contrataciones)->update(['estado' => 1]);
                                FinalizacionContratacion::destroy($modelFinalizacionContratacion->id_finalizacion_contrataciones);
                            }
                        }else{
                            FinalizacionContratacion::destroy($modelFinalizacionContratacion->id_finalizacion_contrataciones);
                        }
                    }
                }

            }else{
                $contratacion = Contrataciones::find($request->id_contrataciones);
                $contratacion->update(['estado'=>3]);
                $contratacion = ForeginContrataciones::find($request->id_contrataciones);
                $contratacion->update(['estado'=>3]);
                $finalizacionContratacion = new FinalizacionContratacion;
                $finalizacionContratacion->id_contrataciones = $request->id_contrataciones;
                $finalizacionContratacion->id_tipo_finalizacion = $request->id_motivo_anulacion;
                $finalizacionContratacion->fecha_finalizacion = $request->fecha_terminacion;
                $finalizacionContratacion->save();

                $status = 1;
                $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                           Se ha terminado la contratación con éxito
                        </div>';
            }
        }else {
            $errores = '';
            foreach ($valida->errors()->all() as $mi_error) {
                if ($errores == '') {
                    $errores = '<li>' . $mi_error . '</li>';
                } else {
                    $errores .= '<li>' . $mi_error . '</li>';
                }
            }
            $msg = '<div class="alert alert-danger">' .
                '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
                '<ul>' .
                $errores .
                '</ul>' .
                '</div>';
            $status = 0;
        }
        return response()->json(['status' => $status, 'msg' => $msg]);
    }

    public function anularContrato(Request $request)
    {
        $objForeignContrataciones = ForeginContrataciones::find($request->id_contrato);
        $objForeignContrataciones->estado = 2;

        if ($objForeignContrataciones->save()) {

            $objContrataciones = Contrataciones::find($request->id_contrato);
            $objContrataciones->estado = 2;

            if ($objContrataciones->save()) {

                $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                          La contratación se ha anulado exitosamente
                        </div>';
                $status = 1;

            }else {
                $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                           ha ocurrido un error al intentar anular la contratación, intente nuevamente!
                        </div>';
                $status = 0;
            }
        }
        return response()->json(['status' => $status, 'msg' => $msg]);
    }

    public function addContratacion(Request $request){

        return view('layouts.views.contrataciones.partials.form_upload_contratacion_firmada',
            [
                'idContratacion'=> $request->id_contrataciones,
                'imagenesContrataciones' => ImagenesDetallesContrataciones::where('id_detalles_contrataciones',$request->id_contrataciones)->get(),
                'estadoContrato'=>Contrataciones::where('id_contrataciones',$request->id_contrataciones)->select('estado')->first(),
            ]);
    }

    public function uploadImagenContratacion(Request $request){

        $msg ='';
        $status = 0;

        foreach ($request->file as $image){

            $validaImagen = Validator::make($request->file,array(
                'mimeType' => 'image',
            ));

            if (!$validaImagen->fails()) {

                //$archivo = $request->file($image);
                $nombre_imagen = mt_rand() . '_' . mt_rand() . $image->getClientOriginalName();

                Storage::disk('imagenes_contratos')->put($nombre_imagen, \File::get($image));
            }

            $objImagenesDetallesContrataciones = new ImagenesDetallesContrataciones;
            $objImagenesDetallesContrataciones->id_detalles_contrataciones = $request->id_contratacion;
            $objImagenesDetallesContrataciones->imagen = $nombre_imagen;

            if($objImagenesDetallesContrataciones->save()){
                $msg .= '<div class="alert alert-success" role="alert" style="margin: 10px">
                            Se ha guardado la imagen '.$image->getClientOriginalName().' con exito
                        </div>';
                $status = 1;
            }else{
                $msg .= '<div class="alert alert-danger" role="alert" style="margin: 10px">
                            Hubo un error al trata de guardar la imagen con el nombre '.$image->getClientOriginalName().'
                        </div>';
                $status = 0;
            }
        }
        return response()->json(array('status'=>$status,'msg'=>$msg));
    }

    public function deleteImagenContratacion(Request $request){

       $deleteImagen = ImagenesDetallesContrataciones::find($request->id_imagen)->delete();

       if($deleteImagen){
           Storage::disk('imagenes_contratos')->delete($request->nombre_imagen);
           $msg = '<div class="alert alert-success" role="alert" style="margin: 10px">
                     Se ha eliminado la imagen con exito
               </div>';
           $status = 1;
       }else{
           $msg = '<div class="alert alert-alert" role="alert" style="margin: 10px">
                     Hubo un error al trata de eliminar la imagen, intente nuevamente
               </div>';
           $status = 1;
       }
       return response()->json(array('status'=>$status,'msg'=>$msg));

    }

    public function camposObligatorios(Request $request){

        return view('layouts.views.contrataciones.partials.campos_obligatorios', [
            'dataCargos' => Cargo::all(),
            'dataTipoContrato' => TipoContratos::where('id_tipo_contrato',$request->id_tipo_contrato)->select('caducidad')->first(),
        ]);

    }

    public function camposRelacionDependencia(){
        return view('layouts.views.contrataciones.partials.campos_relacion_dependecia');
    }

    public function camposSinRelacionDependencia (Request $request){
        return view('layouts.views.contrataciones.partials.campos_sin_relacion_dependencia',[
            'iva' => Iva::all(),
            'dataAddendum' => DetalleContratacion::where('id_detalle_contrataciones',$request->id_detalle_contratacion)->select('iva','retencion_iva','retencion_renta')->first()
        ]);
    }

    public function updateContratacion(Request $request){

            if($request->has('salario')){
                $valida =  Validator::make($request->all(), array(

                    'salario'            => 'required',
                    //'fecha_horario'    => 'required',
                    'fecha_inicio'       => 'required',
                    'horas'              => 'required',
                    'id_cargo'           => 'required',
                    'id_tipo_contrato'   => 'required',
                    'nombres'            => 'required',
                    'apellidos'          => 'required',
                    'nacimiento'         => 'required',
                    'genero'             => 'required',
                    'tipo_identificacion'=> 'required',
                    'identificacion'     => 'required',
                    'correo'             => 'required|email',
                    'telefono'           => 'required',
                    //'nombre_contacto'    => 'required',
                    //'apellido_contacto'  => 'required',
                    //'telefono_contacto'  => 'required',
                    'C_V'                => 'required',
                    'nacionalidad'       => 'required'
                ));
            }else{
                $valida =  Validator::make($request->all(),array(
                    'id_empleado'      => 'required',
                    'id_tipo_contrato' => 'required',
                ));
            }

            if(!$valida->fails()) {

                $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                         hubo un error al realizar la contratación, intente nuevamente
                   </div>';
                $status = 0;

                $objContrato      = Contrato::where('id_tipo_contrato',$request->id_tipo_contrato)->first();
                $objConfigEmpresa = ConfiguracionEmpresa::all();

                if($request->has('salario')){

                    $objPerson = Person::find($request->party_id);
                    $objPerson->first_name           = $request->nombres;
                    $objPerson->last_name            = $request->apellidos;
                    $objPerson->gender               = $request->genero;
                    $objPerson->birth_date           = $request->nacimiento;
                    $objPerson->nacionalidad         = $request->nacionalidad;

                    if($objPerson->save()){

                        $objIdentificacion = PartyIdentification::find($request->party_id);
                        $objIdentificacion->party_identification_type_id  = $request->tipo_identificacion;
                        $objIdentificacion->id_value                      = $request->identificacion;

                        if($objIdentificacion->save()){

                            $objPartyRole = PartyRole::find($request->party_id);
                            $objPartyRole->role_type_id = 'EMPLOYEE';

                            if($objPartyRole->save()){

                                $dataPartyContactMech = PartyContactMech::where('party_id',$request->party_id)
                                    ->join('contact_mech as cm','party_contact_mech.contact_mech_id','cm.contact_mech_id')->get();

                                foreach ($dataPartyContactMech as $pcm){
                                    if($pcm->contact_mech_type_id == "EMAIL_ADDRESS")
                                        $id_contact_mech_email = $pcm->contact_mech_id;
                                    if($pcm->contact_mech_type_id == "TELECOM_NUMBER")
                                        $id_contact_mech_number = $pcm->contact_mech_id;
                                    if($pcm->contact_mech_type_id == "POSTAL_ADDRESS")
                                        $id_contact_mech_address = $pcm->contact_mech_id;
                                }


                                if(isset($id_contact_mech_email)){
                                    $objContactMetch = ContactMetch::find($id_contact_mech_email);
                                }else{
                                    $objContactMetch = new ContactMetch;
                                    $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')->select('seq_id')->first()->seq_id + 1;
                                    $objSeq = SequenceValueItem::where('seq_name','ContactMech');
                                    $objSeq->update(['seq_id'=>$seqNextContactMech]);
                                    $objContactMetch->contact_mech_id = $seqNextContactMech;
                                }

                                $objContactMetch->contact_mech_type_id = 'EMAIL_ADDRESS';
                                $objContactMetch->info_string          =  $request->correo;

                                if(isset($id_contact_mech_number)){
                                    $objTelecomNumber = TelecomNumber::find($id_contact_mech_number);
                                }else{
                                    $objTelecomNumber = new TelecomNumber;
                                    $seqNextContactMechTelecomNumber = SequenceValueItem::where('seq_name','ContactMech')->select('seq_id')->first()->seq_id + 1;
                                    $objSeq = SequenceValueItem::where('seq_name','ContactMech');
                                    $objSeq->update(['seq_id'=>$seqNextContactMechTelecomNumber]);
                                    $objContactMetch = new ContactMetch;
                                    $objContactMetch->contact_mech_id = $seqNextContactMechTelecomNumber;
                                    $objContactMetch->contact_mech_type_id = "TELECOM_NUMBER";
                                    $objContactMetch->save();
                                    $objTelecomNumber->contact_mech_id = $seqNextContactMechTelecomNumber;
                                }

                                $objTelecomNumber->country_code    = '593';
                                $objTelecomNumber->contact_number  = $request->telefono;

                                if($objContactMetch->save() && $objTelecomNumber->save()){

                                    if(!isset($id_contact_mech_email)) {
                                        $modelObjContactMetch = ContactMetch::all()->last();
                                        $objPartyContactMech = new PartyContactMech;
                                        $objPartyContactMech->party_id = $request->party_id;
                                        $objPartyContactMech->contact_mech_id = $modelObjContactMetch->contact_mech_id;
                                        $objPartyContactMech->role_type_id = "EMPLOYEE";
                                        $objPartyContactMech->from_date = now()->toDateString();
                                        $objPartyContactMech->save();
                                    }

                                    if(!isset($id_contact_mech_number)) {

                                        $objPartyContactMech = new PartyContactMech;
                                        $objPartyContactMech->party_id = $request->party_id;
                                        $objPartyContactMech->contact_mech_id = $seqNextContactMechTelecomNumber;
                                        $objPartyContactMech->role_type_id = "EMPLOYEE";
                                        $objPartyContactMech->from_date = now()->toDateString();
                                        $objPartyContactMech->save();
                                    }

                                    if(isset($id_contact_mech_address)){
                                        $objPostalAddres = PostalAddres::find($id_contact_mech_address);
                                    }else{
                                        $seqNextContactMechPostalAddress = SequenceValueItem::where('seq_name','ContactMech')->select('seq_id')->first()->seq_id + 1;
                                        $objSeq = SequenceValueItem::where('seq_name','ContactMech');
                                        $objSeq->update(['seq_id'=>$seqNextContactMechPostalAddress]);
                                        $objPostalAddres = new PostalAddres;
                                        $objPostalAddres->contact_mech_id = $seqNextContactMechPostalAddress;
                                        $objContactMetch = new ContactMetch;
                                        $objContactMetch->contact_mech_id = $seqNextContactMechPostalAddress;
                                        $objContactMetch->contact_mech_type_id = "POSTAL_ADDRESS";
                                        $objContactMetch->save();
                                    }

                                    $objPostalAddres->address1              = $request->C_V;
                                    $objPostalAddres->city                  = $request->ciudad;
                                    $objPostalAddres->country_geo_id        = 'ECU';
                                    $objPostalAddres->state_province_geo_id = $request->id_provincia;

                                    if((!empty($request->nombre_contacto) &&  $request->nombre_contacto != null) &&
                                        (!empty($request->apellido_contacto) && $request->apellido_contacto != null) &&
                                        (!empty($request->telefono_contacto) && $request->telefono_contacto != null)) {

                                        $existPerson = Party::where('party_id',$request->party_id_contact)->first();
                                        if($existPerson != null){
                                            $objParty = Party::find($request->party_id_contact);
                                            $objPerson = Person::find($request->party_id_contact);
                                            $idContactMechContato = PartyContactMech::where('party_id', $request->party_id_contact)->select('contact_mech_id')->first();
                                            $objContactMetch = ContactMetch::find($idContactMechContato->contact_mech_id);
                                            $objTelecomNumber = TelecomNumber::find($idContactMechContato->contact_mech_id);
                                        }else{
                                            $seqNextPartyContacto = SequenceValueItem::where('seq_name','Party')
                                                    ->select('seq_id')->first()->seq_id + 1;

                                            $objSequenceValueItem = SequenceValueItem::find('Party');
                                            $objSequenceValueItem->seq_id = $seqNextPartyContacto;
                                            $objSequenceValueItem->save();

                                            $objParty = new Party;
                                            $objParty->party_id = $seqNextPartyContacto;
                                            $objPerson = new Person;
                                            $objPerson->party_id = $seqNextPartyContacto;
                                            $objContactMechContato = new PartyContactMech;
                                            $objContactMetch = new ContactMetch;
                                            $objTelecomNumber = new TelecomNumber;
                                            $objPartyRole = new PartyRole;
                                        }

                                        $objParty->party_type_id = 'PERSON';

                                        if ($objParty->save()) {

                                            $objPerson->first_name = $request->nombre_contacto;
                                            $objPerson->last_name = $request->apellido_contacto;

                                            if ($objPerson->save()) {
                                                if($existPerson == null){
                                                    $seqNextContactMech = SequenceValueItem::where('seq_name','ContactMech')
                                                            ->select('seq_id')->first()->seq_id + 1;

                                                    $objSequenceValueItem = SequenceValueItem::find('ContactMech');
                                                    $objSequenceValueItem->seq_id = $seqNextContactMech;
                                                    $objSequenceValueItem->save();

                                                    $objContactMetch->contact_mech_id = $seqNextContactMech;

                                                    $objPartyRelationship = new PartyRelationship;
                                                    $objPartyRelationship->party_id_from = $request->party_id;
                                                    $objPartyRelationship->party_id_to = $seqNextPartyContacto;
                                                    $objPartyRelationship->role_type_id_from = "EMPLOYEE";
                                                    $objPartyRelationship->role_type_id_to = "CONTACTO_EMERGENCIA";
                                                    $objPartyRelationship->party_relationship_type_id = "CONTACTO_EMER";
                                                    $objPartyRelationship->from_date = now()->toDateString();
                                                    $objPartyRelationship->save();

                                                }
                                                $objContactMetch->contact_mech_type_id = 'TELECOM_NUMBER';

                                                if ($objContactMetch->save()) {
                                                    if($existPerson  == null)
                                                        $objTelecomNumber->contact_mech_id = $seqNextContactMech;

                                                    $objTelecomNumber->country_code = '593';
                                                    $objTelecomNumber->contact_number = $request->telefono_contacto;
                                                    if($objTelecomNumber->save()){
                                                        if($existPerson == null) {
                                                            $objPartyRole->party_id = $seqNextPartyContacto;
                                                            $objPartyRole->role_type_id = "CONTACTO_EMERGENCIA";
                                                            $objPartyRole->status = true;
                                                            if($objPartyRole->save()){
                                                                $objContactMechContato->party_id = $seqNextPartyContacto;
                                                                $objContactMechContato->contact_mech_id = $seqNextContactMech;
                                                                $objContactMechContato->from_date = now()->toDateString();
                                                                $objContactMechContato->role_type_id = "CONTACTO_EMERGENCIA";
                                                                $objContactMechContato->save();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if ($objPostalAddres->save()) {

                                        if(!isset($id_contact_mech_address)) {
                                            $objPartyContactMech = new PartyContactMech;
                                            $objPartyContactMech->party_id = $request->party_id;
                                            $objPartyContactMech->contact_mech_id = $seqNextContactMechPostalAddress;
                                            $objPartyContactMech->role_type_id = "EMPLOYEE";
                                            $objPartyContactMech->save();
                                        }

                                        $f = explode("-",$request->fecha_inicio);
                                        if ($request->has('activa')) {
                                            $datos = [
                                                ucwords($objConfigEmpresa[0]->nombre_empresa),
                                                $objConfigEmpresa[0]->ruc,
                                                $objConfigEmpresa[0]->direccion_empresa,
                                                ucwords($objConfigEmpresa[0]->representante),
                                                $objConfigEmpresa[0]->identificacion_representante,
                                                $request->ciudad . " " . $request->C_V,
                                                isset($request->id_cargo) ? Cargo::where('id_cargo', $request->id_cargo)->select('nombre')->first()->nombre : '',
                                                isset($request->salario) ? $request->salario : '',
                                                isset($request->horas) ? $request->horas : '',
                                                //isset($horasTrabajo) ? $horasTrabajo : '',
                                                $request->nacionalidad,
                                                //isset($request->letras) ? $request->letras : null,
                                                isset($f[2]) ? $f[2] : null,
                                                isset($f[1]) ? $f[1] : null,
                                                isset($f[0]) ? $f[0] : null,
                                                isset($request->cant_dias) ? $request->cant_dias : null
                                            ];
                                        }

                                        $objContrataciones = Contrataciones::find($request->id_contratacion);
                                        $objContrataciones->id_tipo_contrato = $request->id_tipo_contrato;
                                        $objContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                                        $request->has('activa') ? $objContrataciones->estado = 1 : '';

                                        if ($objContrataciones->save()) {

                                            $objDetalleContratacion = DetalleContratacion::find($request->id_detalle_contrataciones);
                                            $objDetalleContratacion->id_cargo = $request->id_cargo;
                                            $objDetalleContratacion->fecha_expedicion_contrato = isset($request->fecha_inicio) ? $request->fecha_inicio : null;
                                            $objDetalleContratacion->horas_jornada_laboral = isset($request->horas) ? $request->horas : null;
                                            $objDetalleContratacion->nombre_archivo_contrato = $request->has('activa') ? makeContrato($request->nombres, $request->apellidos, $request->identificacion, $datos, $objContrato->cuerpo_contrato) : null;
                                            $objDetalleContratacion->salario = isset($request->salario) ? $request->salario : '';
                                            $objDetalleContratacion->decimo_tercero = isset($request->decimo_tercero) ? $request->decimo_tercero : null;
                                            $objDetalleContratacion->decimo_cuarto = isset($request->decimo_cuarto) ? $request->decimo_cuarto : null;
                                            $objDetalleContratacion->fondo_reserva = isset($request->fondo_reserva) ? $request->fondo_reserva : null;
                                            $objDetalleContratacion->duracion = isset($request->cant_dias) ? $request->cant_dias : null;
                                            $objDetalleContratacion->cantidad_letras = isset($request->letras) ? $request->letras : null;
                                            $objDetalleContratacion->retencion_iva = isset($request->retencion_iva) ? $request->retencion_iva : null;
                                            $objDetalleContratacion->retencion_renta = isset($request->retencion_renta) ? $request->retencion_renta : null;
                                            $objDetalleContratacion->iva = isset($request->iva) ? $request->iva : null;

                                            if ($objDetalleContratacion->save()) {
                                                $objForeginContrataciones = ForeginContrataciones::find($request->id_contratacion);
                                                $objForeginContrataciones->id_tipo_contrato = $request->id_tipo_contrato;
                                                $objForeginContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                                                $request->has('activa') ? $objForeginContrataciones->estado = 1 : 0;

                                                if ($objForeginContrataciones->save()) {
                                                    $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                                                                El contrato se ha guardado con exito!
                                                           </div>';
                                                    $status = 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }else{

                    if(getExistContrataciones($request->id_empleado)){
                        $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                                   El empleado ya tiene ambos contratos activos actualmente (Contratación y Confidencialidad)
                                 </div>';
                        $status = 0;

                    }else{

                        $dataPerson = Person::where('person.party_id',$request->id_empleado)
                            ->join('party_identification as pi', 'person.party_id','=','pi.party_id')
                            ->join('party_contact_mech as pcm', 'person.party_id','=','pcm.party_id')
                            ->join('postal_address as pa','pcm.contact_mech_id','=','pa.contact_mech_id')
                            ->select('person.first_name','person.last_name','pi.id_value','pa.address1','pa.city')
                            ->first();
                        $f = explode("-",$request->fecha_inicio);
                        if($request->has('activa')) {
                            $datos = [
                                ucwords($objConfigEmpresa[0]->nombre_empresa),
                                $objConfigEmpresa[0]->ruc,
                                $objConfigEmpresa[0]->direccion_empresa,
                                ucwords($objConfigEmpresa[0]->representante),
                                $objConfigEmpresa[0]->identificacion_representante,
                                ucwords($dataPerson->city . " " . $dataPerson->address1),
                                isset($request->id_cargo) ? Cargo::where('id_cargo',$request->id_cargo)->select('nombre')->first()->nombre : '',
                                isset($request->salario) ? $request->salario : null,
                                isset($request->horas) ? $request->horas : null,
                                //isset($horasTrabajo) ? $horasTrabajo : null,
                                $request->nacionalidad,
                                //isset($request->letras) ? $request->letras : null,
                                isset($f[2]) ? $f[2] : null,
                                isset($f[1]) ? $f[1] : null,
                                isset($f[0]) ? $f[0] : null,
                                isset($request->cant_dias) ? $request->cant_dias : null
                            ];
                        }

                        $objContrataciones = Contrataciones::find($request->id_contratacion);
                        $objContrataciones->id_tipo_contrato             = $request->id_tipo_contrato;
                        $objContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                        $request->has('activa') ? $objContrataciones->estado = 1 : 0;

                        if($objContrataciones->save()) {
                            $objDetalleContratacion = DetalleContratacion::find($request->id_detalle_contrataciones);
                            $objDetalleContratacion->id_cargo                    = isset($request->id_cargo) ? $request->id_cargo : null;
                            $objDetalleContratacion->fecha_expedicion_contrato   = isset($request->fecha_inicio) ? $request->fecha_inicio : null;//isset($fechaInicioFormateada) ? $fechaInicioFormateada : null;
                            //$objDetalleContratacion->fecha_expiracion_contrato = isset($fechaFinFormateada) ? $fechaFinFormateada : null;
                            //$objDetalleContratacion->hora_entrada              = isset($dataHoraInicio) ? $dataHoraInicio : null;
                            //$objDetalleContratacion->hora_salida               = isset($dataHoraFin) ? $dataHoraFin : null;
                            $objDetalleContratacion->horas_jornada_laboral       = isset($request->horas) ? $request->horas : null; //isset($horasTrabajo) ? $horasTrabajo : null;
                            $objDetalleContratacion->nombre_archivo_contrato     = $request->has('activa') ? makeContrato($dataPerson->first_name,$dataPerson->last_name,$dataPerson->id_value,$datos,$objContrato->cuerpo_contrato) : null;
                            $objDetalleContratacion->salario                     = isset($request->salario) ? $request->salario : null;
                            $objDetalleContratacion->decimo_tercero              = isset($request->decimo_tercero) ? $request->decimo_tercero : null;
                            $objDetalleContratacion->decimo_cuarto               = isset($request->decimo_cuarto) ? $request->decimo_cuarto : null;
                            $objDetalleContratacion->fondo_reserva               = isset($request->fondo_reserva) ? $request->fondo_reserva : null;
                            $objDetalleContratacion->duracion                    = isset($request->cant_dias) ? $request->cant_dias : null;
                            $objDetalleContratacion->cantidad_letras             = isset($request->letras) ? $request->letras : null;

                            if($objDetalleContratacion->save()){

                                $objForeginContrataciones = ForeginContrataciones::find($request->id_contratacion);
                                $objForeginContrataciones->id_tipo_contrato             = $request->id_tipo_contrato;
                                $objForeginContrataciones->id_tipo_contrato_descripcion = tipoContratoDescripcion($request->id_tipo_contrato)->id_tipo_contrato_descripcion;
                                $request->has('activa') ? $objForeginContrataciones->estado = 1 : '';

                                if ($objForeginContrataciones->save()) {

                                    $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                                                El contrato se ha guardado con exito!
                                            </div>';
                                    $status = 1;
                                }
                            }
                        }
                    }
                }

            }else {
                $errores = '';
                foreach ($valida->errors()->all() as $mi_error) {
                    if ($errores == '') {
                        $errores = '<li>' . $mi_error . '</li>';
                    } else {
                        $errores .= '<li>' . $mi_error . '</li>';
                    }
                }
                $msg = '<div class="alert alert-danger">' .
                    '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
                    '<ul>' .
                    $errores .
                    '</ul>' .
                    '</div>';
                $status = 0;
            }

            return response()->json(['status'=>$status,'msg'=>$msg]);
        }

    public function letras(Request $request){
        return valorEnLetras($request->cadena);
    }

    public function add_addendum(Request $request){

        return view('layouts.views.contrataciones.partials.form_addemdum',[
            'dataCargos' => Cargo::all(),
            'dataContratacion' => Contrataciones::where([
                ['contrataciones.id_contrataciones',$request->id_contratacion],
                //['contrataciones.estado',1],
                //['contrataciones.id_tipo_contrato_descripcion',2]
            ])->join('detalles_contrataciones as dc','contrataciones.id_contrataciones','dc.id_contrataciones')
                ->join('tipo_contrato as tc','contrataciones.id_tipo_contrato','tc.id_tipo_contrato')
                ->join('cargos as c','dc.id_cargo','c.id_cargo')
                ->select('horas_jornada_laboral','salario','dc.id_cargo','c.nombre as nombre_cargo','id_detalle_contrataciones','dc.fecha_expedicion_contrato','tc.relacion_dependencia','tc.nombre as nombre_contrato','iva','retencion_iva','retencion_renta','contrataciones.id_contrataciones','tc.relacion_dependencia','dc.decimo_tercero','dc.decimo_cuarto','dc.fondo_reserva','dc.iva','dc.retencion_iva','dc.retencion_renta')->first(),
            'dataAddendum' => Addendum::where('id_contratacion',$request->id_contratacion)->get(),
            'iva' => Iva::all()
        ]);
    }

    public function storeAddendumContrataciones(Request $request)
    {
        $valida = Validator::make($request->all(), [
            'salario'                 => 'required',
            'horas'                   => 'required',
            'id_cargo'                => 'required',
            'letras'                  => 'required',
            'cuerpo_addendum'         => 'required',
            'id_detalle_contratacion' => 'required',
            //'iva                    ' => 'required',
            //'retencion_iva'           => 'required',
            //'retencion_renta'         => 'required',
        ]);

        if (!$valida->fails()) {

            $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                        Hubo un inconveniente al tratar de guardar el addendum, intente de nuevo!
                   </div>';
            $status = 0;

            //dd($request->iva,$request->retencion_iva,$request->retencion_renta);
            $objDetallesContraraciones = DetalleContratacion::find($request->id_detalle_contratacion);
            $objDetallesContraraciones->salario = $request->salario;
            $objDetallesContraraciones->horas_jornada_laboral = $request->horas;
            $objDetallesContraraciones->id_cargo = $request->id_cargo;
            $objDetallesContraraciones->cantidad_letras = $request->letras;
            $request->iva != "undefined" ? $objDetallesContraraciones->iva = $request->iva : "";
            $request->retencion_iva != "undefined" ? $objDetallesContraraciones->retencion_iva = $request->retencion_iva : "";
            $request->retencion_renta != "undefined" ? $objDetallesContraraciones->retencion_renta = $request->retencion_renta : "";

            if($objDetallesContraraciones->save()){
                $dataDetalleContratacion = DetalleContratacion::where('id_detalle_contrataciones',$request->id_detalle_contratacion)->select('id_contrataciones')->first();

                $objAddendum = new Addendum;
                $objAddendum->id_contratacion = $dataDetalleContratacion->id_contrataciones;
                $objAddendum->cuerpo_addendum = $request->cuerpo_addendum;
                $objAddendum->fecha           = Carbon::now()->toDateString();

                $objContrataciones= Contrataciones::where('id_contrataciones',$dataDetalleContratacion->id_contrataciones)->select('id_empleado')->first();
                $objConfigEmpresa = ConfiguracionEmpresa::select('nombre_empresa','ruc','direccion_empresa','representante')->first();
                $dataPerson       = Person::where('person.party_id',$objContrataciones->id_empleado)->join('party_identification as pi','person.party_id','pi.party_id')
                                    //->join('party_contact_mech as pcm','pi.party_id','pcm.party_id')
                                    //->join('postal_address as pa','pcm.contact_mech_id','pa.contact_mech_id')
                                    ->select('first_name','last_name','id_value',/*'address1','city',*/'nacionalidad')->first();

                $postalAddress = getPostalAddres($objContrataciones->id_empleado);
                $f = explode("-",$request->fecha_inicio);
                $datos = [
                    ucwords($objConfigEmpresa->nombre_empresa),
                    $objConfigEmpresa->ruc,
                    $objConfigEmpresa->direccion_empresa,
                    ucwords($objConfigEmpresa->representante),
                    $objConfigEmpresa->identificacion_representante,
                    $postalAddress->city . " " . $postalAddress->address1,
                    Cargo::where('id_cargo',$request->id_cargo)->select('nombre')->first()->nombre,
                    $request->salario,
                    $request->horas,
                    $dataPerson->nacionalidad,
                    isset($f[2]) ? $f[2] : null,
                    isset($f[1]) ? $f[1] : null,
                    isset($f[0]) ? $f[0] : null,
                    isset($request->cant_dias) ? $request->cant_dias : null
                ];
                $objAddendum->nombre_archivo = makeContrato($dataPerson->first_name,$dataPerson->last_name, $dataPerson->id_value,$datos,$request->cuerpo_addendum);

                if($objAddendum->save()){

                    $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                              El addendum se ha guardado con exito!
                            </div>';
                    $status = 1;
                }
            }

        }else {
            $errores = '';
            foreach ($valida->errors()->all() as $mi_error) {
                if ($errores == '') {
                    $errores = '<li>' . $mi_error . '</li>';
                } else {
                    $errores .= '<li>' . $mi_error . '</li>';
                }
            }
            $msg = '<div class="alert alert-danger">' .
                '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
                '<ul>' .
                $errores .
                '</ul>' .
                '</div>';
            $status = 0;
        }

        return response()->json(array('status'=>$status,'msg'=>$msg));

    }

    public function validaSueldoSectorial(Request $request){

        $sueldo_minimo_sectorial = Cargo::where('id_cargo',$request->id_cargo)->select('sueldo_minimo_sectorial')->first()->sueldo_minimo_sectorial;
        $tipo_contrato = TipoContratos::where('id_tipo_contrato',$request->id_tipo_contrato)->first()->sueldo_sectorial;

        return response()->json(
            [
                'sueldo_minimo_sectorial'=>$sueldo_minimo_sectorial,
                'tipo_contrato'=>$tipo_contrato
            ]);

    }

    public function formBonosFijos(Request $request){

        $dataBono = BonoFijo::where('id_contratacion',$request->id_contratacion);
        $dataPrestamo = Prestamo::where([
            ['id_contratacion',$request->id_contratacion],
            ['pagado',0]
        ]);
        return view('layouts.views.contrataciones.partials.form_bono_fijo',[
            'idBonoFijo' => $request->id_bono_fijo,
            'idContratacion' => $request->id_contratacion,
            'dataBono' => $dataBono,
            'dataPrestamo' => $dataPrestamo
        ]);
    }

    public function storeBonosFijos(Request $request){

        $valida = Validator::make($request->all(), [
            'arrData' => 'required|Array',
        ]);

        if (!$valida->fails()) {

            BonoFijo::where('id_contratacion',$request->arrData[0][2])->delete();

            foreach ($request->arrData as $data) {

                $objBonoFijo = new BonoFijo;
                $objBonoFijo->id_contratacion = $data[3];
                $objBonoFijo->nombre = $data[0];
                $objBonoFijo->monto = $data[1];
                $objBonoFijo->fecha_asignacion = Carbon::parse($data[4])->format('Y-m-05');

                if ($objBonoFijo->save()) {
                    $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                             El bono fijo se ha guardado con exito!
                        </div>';
                    $status = 1;
                } else {
                    $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                             Ha ocurrido un inconveniente al tratar de guardar el bono fijo, intente nuevamente !
                        </div>';
                    $status = 0;
                }
            }
        }else {
            $errores = '';
            foreach ($valida->errors()->all() as $mi_error) {
                if ($errores == '') {
                    $errores = '<li>' . $mi_error . '</li>';
                } else {
                    $errores .= '<li>' . $mi_error . '</li>';
                }
            }
            $msg = '<div class="alert alert-danger">' .
                '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
                '<ul>' .
                $errores .
                '</ul>' .
                '</div>';
            $status = 0;
        }
        return response()->json(['status'=>$status,'msg'=>$msg]);
    }

    public function inputsBonosFijos(Request $request){

       // BonoFijo::where('id_contratacion',);
        return view('layouts.views.contrataciones.partials.inptus_bono_fijo',[
            'cant' => $request->cant_inputs,

        ]);
    }

    public function inputsPrestamos(Request $request){

        return view('layouts.views.contrataciones.partials.inputs_prestamo',[
            'cant' => $request->cant_inputs,

        ]);
    }

    public function storePrestamo(Request $request){

        $valida = Validator::make($request->all(), [
            //'arrData' => 'required|Array',
        ]);

        if (!$valida->fails()) {

            Prestamo::where('id_contratacion',$request->arrData[0][2])->delete();

            foreach ($request->arrData as $data) {

                $objBonoFijo = new Prestamo;
                $objBonoFijo->id_contratacion = $data[3];
                $objBonoFijo->nombre = $data[0];
                $objBonoFijo->cuota = $data[1];
                $objBonoFijo->total = $data[4];
                $objBonoFijo->fecha_inicio_descuento = Carbon::parse($data[5])->format('Y-m-05');

                if ($objBonoFijo->save()) {
                    $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                             El prestamo se ha guardado con exito!
                        </div>';
                    $status = 1;
                } else {
                    $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                             Ha ocurrido un inconveniente al tratar de guardar el prestamo, intente nuevamente !
                        </div>';
                    $status = 0;
                }
            }
        }else {
            $errores = '';
            foreach ($valida->errors()->all() as $mi_error) {
                if ($errores == '') {
                    $errores = '<li>' . $mi_error . '</li>';
                } else {
                    $errores .= '<li>' . $mi_error . '</li>';
                }
            }
            $msg = '<div class="alert alert-danger">' .
                '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
                '<ul>' .
                $errores .
                '</ul>' .
                '</div>';
            $status = 0;
        }
        return response()->json(['status'=>$status,'msg'=>$msg]);
    }

    public function deleteBonosFijos(Request $request){

        if(BonoFijo::destroy($request->id_bono_fijo)){
            $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                             El bono fijo se ha eliminado con exito!
                        </div>';
            $status = 1;
        } else {
            $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                             Ha ocurrido un inconveniente al tratar de eliminar el bono fijo, intente nuevamente !
                        </div>';
            $status = 0;
        }
        return response()->json(['status'=>$status,'msg'=>$msg]);
    }

    public function updateDetalleContratacion(Request $request){

        /*$valida = Validator::make($request->all(), [
            'iva'                 => 'required',
            'retencion_iva'                   => 'required',
            'retencion_renta'                => 'required',
        ]);*/

        //if (!$valida->fails()) {

            $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                        Hubo un inconveniente al tratar de actualizar los datos, intente de nuevo!
                   </div>';
            $status = 0;

            $objDetallesContraraciones = DetalleContratacion::find($request->id_detalle_contratacion);
            isset($request->retencion_renta) ? $objDetallesContraraciones->retencion_renta = $request->retencion_renta : "";
            isset($request->retencion_iva)   ? $objDetallesContraraciones->retencion_iva = $request->retencion_iva : "";
            isset($request->iva)             ? $objDetallesContraraciones->iva = $request->iva : "";
            isset($request->decimo_tercero)  ? $objDetallesContraraciones->decimo_tercero = $request->decimo_tercero : "";
            isset($request->decimo_cuarto)   ? $objDetallesContraraciones->decimo_cuarto = $request->decimo_cuarto : "";
            isset($request->fondo_reserva)   ? $objDetallesContraraciones->fondo_reserva = $request->fondo_reserva : "";
            isset($request->horas_laborales)   ? $objDetallesContraraciones->horas_jornada_laboral = $request->horas_laborales : "";
            isset($request->salario) ? $objDetallesContraraciones->salario = $request->salario : "";
            isset($request->salario) ? $objDetallesContraraciones->cantidad_letras = trim(valorEnLetras($request->salario)) : "";

            if($objDetallesContraraciones->save()){
                $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                          Se ha actualizado los datos de la contratación exitosamente!
                        </div>';
                $status = 1;
            }
        /*}else {
            $errores = '';
            foreach ($valida->errors()->all() as $mi_error) {
                if ($errores == '') {
                    $errores = '<li>' . $mi_error . '</li>';
                } else {
                    $errores .= '<li>' . $mi_error . '</li>';
                }
            }
            $msg = '<div class="alert alert-danger">' .
                '<p class="text-center">¡Por favor corrija los siguientes errores!</p>' .
                '<ul>' .
                $errores .
                '</ul>' .
                '</div>';
            $status = 0;
        }*/

        return response()->json(array('status'=>$status,'msg'=>$msg));
    }

    public function deletePrestamo(Request $request){

        $msg = '<div class="alert alert-danger" role="alert" style="margin: 0">
                    Ha ocurrido un inconveniente al tratar de eliminar el prestamo, intente nuevamente !
                </div>';
        $status = 0;

        if(Prestamo::destroy($request->id_prestamo)){
            $msg = '<div class="alert alert-success" role="alert" style="margin: 0">
                    El prestamo se ha eliminado con éxito!
                </div>';
            $status = 1;
        }

        return response()->json(array('success'=>$status,'msg'=>$msg));
    }

}
